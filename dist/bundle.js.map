{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/console.ts","webpack:///./src/demo.ts","webpack:///./src/entity.ts","webpack:///./src/expression.ts","webpack:///./src/index.ts","webpack:///./src/interpreter.ts","webpack:///./src/parser.ts","webpack:///./src/prototype.ts","webpack:///./src/return.ts","webpack:///./src/scanner.ts","webpack:///./src/scope.ts","webpack:///./src/statement.ts","webpack:///./src/token.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","export enum ConsoleMessageType {\r\n    User,\r\n    Error,\r\n    Warning,\r\n    Info\r\n}\r\n\r\nexport interface ConsoleMessage {\r\n    time: Date;\r\n    text: any;\r\n    type: ConsoleMessageType;\r\n}\r\n\r\nexport class Console {\r\n\r\n    public messages: ConsoleMessage[];\r\n\r\n    constructor() {\r\n        this.messages = [];\r\n    }\r\n\r\n    private add(message: any, type: ConsoleMessageType): void {\r\n        this.messages.push({\r\n            text: message,\r\n            type: type,\r\n            time: new Date()\r\n        });\r\n    }\r\n\r\n    public clear(): void {\r\n        this.messages = [];\r\n    }\r\n\r\n    public log(message: any) {\r\n        this.add(message, ConsoleMessageType.User);\r\n    }\r\n\r\n    public warn(message: any) {\r\n        this.add(message, ConsoleMessageType.Warning);\r\n    }\r\n\r\n    public error(message: any) {\r\n        this.add(message, ConsoleMessageType.Error);\r\n        // throw new Error(\"\");\r\n    }\r\n\r\n    public info(message: any) {\r\n        this.add(message, ConsoleMessageType.Info);\r\n    }\r\n\r\n    public print(): any {\r\n        return console.log(this.messages.map(cm => cm.text));\r\n    }\r\n\r\n}","export const DemoSourceCode =\r\n`\r\n// prototype\r\nfunction MyClass() {\r\n    print \"my class\";\r\n}\r\nMyClass.method = function(this) {\r\n    this.something = \"anything\";\r\n};\r\n\r\nlet obj = new MyClass();\r\nobj.method();\r\nprint obj.something;\r\n\r\n\r\n// recursivity\r\nfunction recursive(n, m) {\r\n  if (n < m)\r\n    return recursive(n + 1, m);\r\n  return n;\r\n}\r\nprint recursive(0,5);\r\n\r\n// string length operator '$'\r\nprint \"the length of hellow world is: \" + $\"hello world\";\r\nprint  $\"hello\" === 6 ? 'hello is 5 character length' : 'it is not';\r\n\r\n// while loop and ternary operator\r\nlet i = 0;\r\nwhile (i <= 10) {\r\n    print i % 2 ? 'odd' : 'even';\r\n    i = i + 1;\r\n}\r\n\r\n// native method rand()\r\nfunction showRand(a) {\r\n  echo(\"random: \" + a + rand());\r\n}\r\nshowRand(\" text \");\r\n\r\n\r\n// while loop\r\nvar counter = 1;\r\nwhile (counter < 10) {\r\n  echo(\"counter is: \" + counter);\r\n  counter = counter + 1;\r\n}\r\n\r\n// if else block\r\nif (counter == 10)\r\n  echo(\"counter is 10\");\r\nelse\r\n  echo(\"counter is not 10\");\r\n\r\n// do while block\r\ncounter = 1;\r\ndo {\r\n  echo(counter + counter);\r\n  counter = counter + 1;\r\n} while (counter < 10);\r\n\r\necho(counter);\r\n\r\n// scope and closure\r\nvar a = \"global a\";\r\nvar b = \"global b\";\r\nvar c = \"global c\";\r\n{\r\n  var a = \"outer a\";\r\n  var b = \"outer b\";\r\n  {\r\n    var a = \"inner a\";\r\n    echo(a);\r\n    echo(b);\r\n    echo(c);\r\n  }\r\n  echo(a);\r\n  echo(b);\r\n  echo(c);\r\n}\r\necho(a);\r\necho(b);\r\necho(c);\r\n\r\nfunction test() {\r\n\r\n}\r\ntest.method = function() {\r\n    print \"hello world\";\r\n};\r\nprint test.method();\r\nvar d = {\r\n    firstname: \"John\",\r\n    lastname: \"Doe\",\r\n    records: {\r\n        prev: \"previous\",\r\n        next: \"next\"\r\n    }\r\n};\r\necho(d);\r\n`;\r\n","import { Interpreter } from './interpreter';\r\nimport { Scope } from './scope';\r\nimport { Return } from './return';\r\nimport { Prototype } from './prototype';\r\nimport * as Stmt from './statement';\r\n\r\nexport class RuntimeObject {\r\n    public prototype: Prototype;\r\n    public properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        this.prototype = new Prototype(null);\r\n        this.properties = new Map();\r\n    }\r\n\r\n    public get(key: string): any {\r\n        if (this.properties.has(key)) {\r\n            return this.properties.get(key);\r\n        }\r\n        return this.prototype.get(key);\r\n    }\r\n\r\n    public set(key: string, value: any) {\r\n        this.properties.set(key, value);\r\n    }\r\n\r\n    public toString(): string {\r\n        return 'object';\r\n    }\r\n}\r\n\r\nexport class CallableObject extends RuntimeObject {\r\n\r\n    constructor() {\r\n        super();\r\n        // TODO: inheritance place\r\n        this.properties.set('prototype', this.prototype);\r\n    }\r\n    public arity(): number {\r\n        return 0;\r\n    }\r\n    public call(interpreter: Interpreter, args: any[]): any { return; }\r\n    public toString(): string {\r\n        return 'function';\r\n    }\r\n}\r\n\r\nexport class CallableFunc extends CallableObject {\r\n    public name: string;\r\n    private declaration: Stmt.Func;\r\n    private closure: Scope;\r\n\r\n    constructor(declaration: Stmt.Func, closure: Scope) {\r\n        super();\r\n        this.declaration = declaration;\r\n        this.closure = closure;\r\n        this.name = this.declaration.name.lexeme;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.declaration.name.lexeme;\r\n    }\r\n\r\n    public arity(): number {\r\n        return this.declaration.params.length;\r\n    }\r\n\r\n    public call(interpreter: Interpreter, args: any[]): any {\r\n        const scope = new Scope(this.closure);\r\n        for (let i = 0; i < this.declaration.params.length; i++) {\r\n            scope.define(this.declaration.params[i].lexeme, args[i]);\r\n        }\r\n        try {\r\n            interpreter.executeBlock(this.declaration.body, scope);\r\n        } catch (e) {\r\n            if (e instanceof Return) {\r\n                return e.value;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n}\r\n\r\nexport class EntityInstance extends RuntimeObject {\r\n    private instanceof: string;\r\n    constructor(construct: CallableFunc) {\r\n        super();\r\n        this.instanceof = construct.name;\r\n        this.properties = new Map();\r\n        this.prototype = construct.prototype;\r\n        this.properties.set('prototype', this.prototype);\r\n    }\r\n\r\n    public get(key: string): any {\r\n        if (this.properties.has(key)) {\r\n            return this.properties.get(key);\r\n        }\r\n        return this.prototype.get(key);\r\n        throw new Error(`${this.instanceof} does not have ${key}`);\r\n    }\r\n\r\n    public set(key: string, value: any) {\r\n        this.prototype.set(key, value);\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.instanceof + \" instance\";\r\n    }\r\n}\r\n\r\nexport class ClassPrototype  extends CallableObject {\r\n\r\n    public name: string;\r\n    public prototype: Prototype;\r\n\r\n    constructor(name: string, methods: Stmt.Func[]) {\r\n        super();\r\n        this.name = name;\r\n        this.prototype = new Prototype(null);\r\n        for (const method of methods) {\r\n            this.prototype.set(method.name.lexeme, method);\r\n        }\r\n    }\r\n\r\n    public arity(): number {\r\n        return 0;\r\n    }\r\n\r\n    public call(interpreter: Interpreter, args: any[]): any {\r\n        const instance: EntityInstance = new EntityInstance(null);\r\n        return instance;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.name;\r\n    }\r\n\r\n}\r\n","import { Token } from 'token';\n\nimport { Stmt } from 'statement';\n\nexport abstract class Expr {\n    constructor() {}\n    abstract accept<R>(visitor: ExprVisitor<R>): R;\n}\n\nexport interface ExprVisitor<R> {\n\tvisitAssignExpr(expr: Assign): R;\n\tvisitBinaryExpr(expr: Binary): R;\n\tvisitTernaryExpr(expr: Ternary): R;\n\tvisitCallExpr(expr: Call): R;\n\tvisitEntityExpr(expr: Entity): R;\n\tvisitGetExpr(expr: Get): R;\n\tvisitSetExpr(expr: Set): R;\n\tvisitNewExpr(expr: New): R;\n\tvisitGroupingExpr(expr: Grouping): R;\n\tvisitLiteralExpr(expr: Literal): R;\n\tvisitUnaryExpr(expr: Unary): R;\n\tvisitVariableExpr(expr: Variable): R;\n\tvisitKeyExpr(expr: Key): R;\n\tvisitLambdaExpr(expr: Lambda): R;\n\tvisitArrayExpr(expr: Array): R;\n}\n\nexport class Assign extends Expr {\n\tpublic name: Token;\n\tpublic value: Expr;\n\n\tconstructor(name: Token, value: Expr) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.value = value;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitAssignExpr(this);\n    }\n}\n\nexport class Binary extends Expr {\n\tpublic left: Expr;\n\tpublic operator: Token;\n\tpublic right: Expr;\n\n\tconstructor(left: Expr, operator: Token, right: Expr) {\n\t\tsuper();\n\t\tthis.left = left;\n\t\tthis.operator = operator;\n\t\tthis.right = right;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitBinaryExpr(this);\n    }\n}\n\nexport class Ternary extends Expr {\n\tpublic condition: Expr;\n\tpublic thenExpr: Expr;\n\tpublic elseExpr: Expr;\n\n\tconstructor(condition: Expr, thenExpr: Expr, elseExpr: Expr) {\n\t\tsuper();\n\t\tthis.condition = condition;\n\t\tthis.thenExpr = thenExpr;\n\t\tthis.elseExpr = elseExpr;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitTernaryExpr(this);\n    }\n}\n\nexport class Call extends Expr {\n\tpublic callee: Expr;\n\tpublic paren: Token;\n\tpublic args: Expr[];\n\n\tconstructor(callee: Expr, paren: Token, args: Expr[]) {\n\t\tsuper();\n\t\tthis.callee = callee;\n\t\tthis.paren = paren;\n\t\tthis.args = args;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitCallExpr(this);\n    }\n}\n\nexport class Entity extends Expr {\n\tpublic properties: Expr[];\n\n\tconstructor(properties: Expr[]) {\n\t\tsuper();\n\t\tthis.properties = properties;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitEntityExpr(this);\n    }\n}\n\nexport class Get extends Expr {\n\tpublic entity: Expr;\n\tpublic key: Expr;\n\n\tconstructor(entity: Expr, key: Expr) {\n\t\tsuper();\n\t\tthis.entity = entity;\n\t\tthis.key = key;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitGetExpr(this);\n    }\n}\n\nexport class Set extends Expr {\n\tpublic entity: Expr;\n\tpublic key: Expr;\n\tpublic value: Expr;\n\n\tconstructor(entity: Expr, key: Expr, value: Expr) {\n\t\tsuper();\n\t\tthis.entity = entity;\n\t\tthis.key = key;\n\t\tthis.value = value;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitSetExpr(this);\n    }\n}\n\nexport class New extends Expr {\n\tpublic construct: Expr;\n\n\tconstructor(construct: Expr) {\n\t\tsuper();\n\t\tthis.construct = construct;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitNewExpr(this);\n    }\n}\n\nexport class Grouping extends Expr {\n\tpublic expression: Expr;\n\n\tconstructor(expression: Expr) {\n\t\tsuper();\n\t\tthis.expression = expression;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitGroupingExpr(this);\n    }\n}\n\nexport class Literal extends Expr {\n\tpublic value: any;\n\n\tconstructor(value: any) {\n\t\tsuper();\n\t\tthis.value = value;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitLiteralExpr(this);\n    }\n}\n\nexport class Unary extends Expr {\n\tpublic operator: Token;\n\tpublic right: Expr;\n\n\tconstructor(operator: Token, right: Expr) {\n\t\tsuper();\n\t\tthis.operator = operator;\n\t\tthis.right = right;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitUnaryExpr(this);\n    }\n}\n\nexport class Variable extends Expr {\n\tpublic name: Token;\n\n\tconstructor(name: Token) {\n\t\tsuper();\n\t\tthis.name = name;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitVariableExpr(this);\n    }\n}\n\nexport class Key extends Expr {\n\tpublic name: Token;\n\n\tconstructor(name: Token) {\n\t\tsuper();\n\t\tthis.name = name;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitKeyExpr(this);\n    }\n}\n\nexport class Lambda extends Expr {\n\tpublic lambda: Stmt;\n\n\tconstructor(lambda: Stmt) {\n\t\tsuper();\n\t\tthis.lambda = lambda;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitLambdaExpr(this);\n    }\n}\n\nexport class Array extends Expr {\n\tpublic value: Expr[];\n\n\tconstructor(value: Expr[]) {\n\t\tsuper();\n\t\tthis.value = value;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitArrayExpr(this);\n    }\n}\n\n\n","import { Scanner } from './scanner';\r\nimport { Parser } from './parser';\r\nimport { Interpreter } from './interpreter';\r\nimport { Console } from './console';\r\nimport { DemoSourceCode } from './demo';\r\n\r\n(<any>window).conzole = new Console();\r\n(<any>window).demoSourceCode = DemoSourceCode;\r\n(<any>window).execute = function(source: string): Console {\r\n    /*\r\n    const consoleInstance = new Console();\r\n    const scanner = new Scanner(source);\r\n    const printer = new TreePrinter();\r\n    const tokens = scanner.scanTokens();\r\n    const parser = new Parser(tokens);\r\n    const intererpreter = new Interpreter(consoleInstance);\r\n    const statements = parser.parse();\r\n    intererpreter.interpet(statements);\r\n    */\r\n\r\n\r\n    return (new Interpreter().interpet((new Parser((new Scanner(source)).scan())).parse()));\r\n}\r\n","import * as Expr from './expression';\r\nimport * as Stmt from './statement';\r\nimport { CallableFunc, CallableObject, ClassPrototype, EntityInstance, RuntimeObject} from './entity';\r\nimport { Console } from './console';\r\nimport { Return } from './return';\r\nimport { Scope } from './scope';\r\nimport { TokenType } from './token';\r\nimport { Prototype } from './prototype';\r\ndeclare var conzole: Console;\r\n\r\nexport class Interpreter implements\r\n    Expr.ExprVisitor<any>,\r\n    Stmt.StmtVisitor<void> {\r\n    public global = new Scope();\r\n    private scope = this.global;\r\n\r\n    constructor( ) {\r\n        const rand = new CallableObject();\r\n        rand.call = () => Math.random();\r\n        rand.toString = () => '<native function>';\r\n        this.global.define('rand', rand);\r\n\r\n        const echo = new CallableObject();\r\n        echo.arity = () => 1;\r\n        echo.toString = () => '<native function>';\r\n        echo.call = (interpreter, args) => console.log(args[0]);\r\n        this.global.define('echo', echo);\r\n\r\n        this.global.define('months', [\"Jan\", \"Feb\", \"Mar\", \"Apr\"]);\r\n\r\n    }\r\n\r\n    private evaluate(expr: Expr.Expr): any {\r\n        return expr.accept(this);\r\n    }\r\n\r\n    private execute(stmt: Stmt.Stmt): void {\r\n        stmt.accept(this);\r\n    }\r\n\r\n    public interpet(statements: Stmt.Stmt[]): any {\r\n        for (const statement of statements) {\r\n            this.execute(statement);\r\n        }\r\n    }\r\n\r\n    public visitExpressionStmt(stmt: Stmt.Expression): void {\r\n        this.evaluate(stmt.expression);\r\n    }\r\n\r\n    public visitPrintStmt(stmt: Stmt.Print): void {\r\n        const value = this.evaluate(stmt.expression);\r\n        conzole.log(value);\r\n    }\r\n\r\n    public visitVarStmt(stmt: Stmt.Var): void {\r\n        let value: object = null;\r\n        if (stmt.initializer !== null) {\r\n            value = this.evaluate(stmt.initializer);\r\n        }\r\n\r\n        if (stmt.type.type === TokenType.var)  {\r\n            this.scope.set(stmt.name.lexeme, value);\r\n        } else {\r\n            this.scope.define(stmt.name.lexeme, value);\r\n        }\r\n    }\r\n\r\n    public visitVariableExpr(expr: Expr.Variable): any {\r\n        return this.scope.get(expr.name);\r\n    }\r\n\r\n    public visitArrayExpr(expr: Expr.Array): any[] {\r\n        const arr: any[] = [];\r\n        for (const expression of expr.value) {\r\n            arr.push(this.evaluate(expression));\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    public visitAssignExpr(expr: Expr.Assign): void {\r\n        const value = this.evaluate(expr.value);\r\n        this.scope.assign(expr.name.lexeme, value);\r\n    }\r\n\r\n    public visitBinaryExpr(expr: Expr.Binary): any {\r\n        const left = this.evaluate(expr.left);\r\n        const right = this.evaluate(expr.right);\r\n        switch (expr.operator.type) {\r\n            case TokenType.minus:\r\n                return <number> left - <number> right;\r\n            case TokenType.slash:\r\n                return <number> left / <number> right;\r\n            case TokenType.star:\r\n                return <number> left * <number> right;\r\n            case TokenType.percent:\r\n                return <number> left % <number> right;\r\n            case TokenType.plus:\r\n                if (typeof left === 'number' && typeof right === 'number') {\r\n                    return <number> (left + right);\r\n                } else {\r\n                    return <string> left + <string> right;\r\n                }\r\n            case TokenType.pipe:\r\n                return <number> left | <number> right;\r\n            case TokenType.caret:\r\n                return <number> left ^ <number> right;\r\n            case TokenType.greater:\r\n                return <number> left > <number> right;\r\n            case TokenType.greaterEqual:\r\n                return <number> left >= <number> right;\r\n            case TokenType.less:\r\n                return <number> left < <number> right;\r\n            case TokenType.lessEqual:\r\n                return <number> left <= <number> right;\r\n            case TokenType.equalEqual:\r\n                // tslint:disable-next-line\r\n                return left == right;\r\n            case TokenType.equalEqualEqual:\r\n                return left === right;\r\n            case TokenType.bangEqual:\r\n                // tslint:disable-next-line\r\n                return left != right;\r\n            case TokenType.bangEqualEqual:\r\n                return left !== right;\r\n            default:\r\n                conzole.warn(expr);\r\n                return null; // unreachable\r\n                break;\r\n        }\r\n    }\r\n\r\n    public visitTernaryExpr(expr: Expr.Ternary): any {\r\n        return this.evaluate(expr.condition) ? this.evaluate(expr.thenExpr) : this.evaluate(expr.elseExpr);\r\n    }\r\n\r\n    public visitGroupingExpr(expr: Expr.Grouping): any {\r\n        return this.evaluate(expr.expression);\r\n    }\r\n\r\n    public visitLiteralExpr(expr: Expr.Literal): any {\r\n        return expr.value;\r\n    }\r\n\r\n    public visitUnaryExpr(expr: Expr.Unary): any {\r\n        const right = this.evaluate(expr.right);\r\n        switch (expr.operator.type) {\r\n            case TokenType.minus:\r\n                return -Number(right);\r\n            case TokenType.bang:\r\n                return !Boolean(right);\r\n            case TokenType.dollar:\r\n                return right.length;\r\n            case TokenType.plusPlus:\r\n                const incValue = Number(right) + 1;\r\n                this.scope.assign((<Expr.Variable> expr.right).name.lexeme, incValue);\r\n                return incValue;\r\n            case TokenType.minusMinus:\r\n                const decValue = Number(right) - 1;\r\n                this.scope.assign((<Expr.Variable> expr.right).name.lexeme, decValue);\r\n                return decValue;\r\n            default:\r\n                return null; // should be unreachable\r\n        }\r\n    }\r\n\r\n    public executeBlock(statements: Stmt.Stmt[], nextScope: Scope): void {\r\n        const currentScope = this.scope;\r\n        this.scope = nextScope;\r\n        for (const statement of statements) {\r\n            this.execute(statement);\r\n        }\r\n        this.scope = currentScope;\r\n    }\r\n\r\n    public visitBlockStmt(stmt: Stmt.Block): void {\r\n        this.executeBlock(stmt.statements, new Scope(this.scope));\r\n    }\r\n\r\n    public visitIfStmt(stmt: Stmt.If): void {\r\n        if (this.evaluate(stmt.condition)) {\r\n            this.execute(stmt.thenStmt);\r\n        } else if (stmt.elseStmt !== null) {\r\n            this.execute(stmt.elseStmt);\r\n        }\r\n    }\r\n\r\n    public visitWhileStmt(stmt: Stmt.While): void {\r\n        while (this.evaluate(stmt.condition)) {\r\n            this.execute(stmt.loop);\r\n        }\r\n    }\r\n\r\n    public visitDoWhileStmt(stmt: Stmt.DoWhile): void {\r\n        do {\r\n            this.execute(stmt.loop);\r\n        } while (this.evaluate(stmt.condition));\r\n    }\r\n\r\n    public visitCallExpr(expr: Expr.Call): object {\r\n        const callee = this.evaluate(expr.callee);\r\n        const args = [];\r\n        if (expr.callee instanceof Expr.Get) {\r\n            args.push(\r\n                this.evaluate(expr.callee.entity)\r\n            );\r\n        }\r\n        for (const argument of expr.args) {\r\n            args.push(this.evaluate(argument));\r\n        }\r\n\r\n        if ( !(callee instanceof CallableObject)) {\r\n            conzole.error(`${callee} is not a function`);\r\n            throw new Error();\r\n        }\r\n        const func = callee as CallableObject;\r\n        if (args.length !== func.arity()) {\r\n            conzole.warn(`Warning at (${expr.paren.line}): ${callee} mismatched argument length`);\r\n        }\r\n        return func.call(this, args);\r\n    }\r\n\r\n    public visitNewExpr(expr: Expr.New): object {\r\n        const construct = expr.construct as Expr.Call;\r\n        const callee = this.evaluate(construct.callee);\r\n        this.evaluate(construct);\r\n        return new EntityInstance(callee);\r\n    }\r\n\r\n    public visitEntityExpr(expr: Expr.Entity) {\r\n        const entity = new RuntimeObject();\r\n        for (const property of expr.properties) {\r\n            const key  = this.evaluate((property as Expr.Set).key);\r\n            const value = this.evaluate((property as Expr.Set).value);\r\n            entity.set(key, value);\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    public visitClassStmt(stmt: Stmt.Class): any {\r\n        this.scope.define(stmt.name.lexeme, null);\r\n        const classDef = new ClassPrototype(stmt.name.lexeme, stmt.methods);\r\n        this.scope.set(stmt.name.lexeme, classDef);\r\n        return null;\r\n    }\r\n\r\n    public visitKeyExpr(expr: Expr.Key): string {\r\n        return expr.name.lexeme;\r\n    }\r\n\r\n    public visitGetExpr(expr: Expr.Get): any {\r\n        const entity = this.evaluate(expr.entity);\r\n        const key = this.evaluate(expr.key);\r\n        if (entity instanceof RuntimeObject) {\r\n            return entity.get(key);\r\n        }\r\n        conzole.error(`${entity}.${key}: only instances have properties`);\r\n        throw new Error();\r\n    }\r\n\r\n    public visitSetExpr(expr: Expr.Set): void {\r\n        const entity = this.evaluate(expr.entity);\r\n        const key = this.evaluate(expr.key);\r\n        // TODO: check type of entity properly: CallableObject/Prototype\r\n        if (typeof entity.set === \"undefined\") {\r\n            conzole.warn(`${entity} is not a runtime Object`);\r\n        }\r\n        const value = this.evaluate(expr.value);\r\n        (entity as RuntimeObject).set(key, value);\r\n        return value;\r\n    }\r\n\r\n    public visitFuncStmt(stmt: Stmt.Func): any {\r\n        const func: CallableFunc = new CallableFunc(stmt, this.scope);\r\n        this.scope.define(stmt.name.lexeme, func);\r\n        return null;\r\n    }\r\n\r\n    public visitLambdaExpr(expr: Expr.Lambda): object {\r\n        const lambda: Stmt.Func = expr.lambda as Stmt.Func;\r\n        const func: CallableFunc = new CallableFunc(lambda, this.scope);\r\n        return func;\r\n    }\r\n\r\n    public visitReturnStmt(stmt: Stmt.Return): any {\r\n        let value = undefined;\r\n        if (stmt.value) {\r\n            value = this.evaluate(stmt.value);\r\n        }\r\n        throw new Return(value);\r\n    }\r\n\r\n}\r\n","import { Token, TokenType } from './token';\r\nimport * as Expr from './expression';\r\nimport * as Stmt from './statement';\r\nimport { Console } from './console';\r\ndeclare var conzole: Console;\r\n\r\nexport class Parser {\r\n    private current = 0;\r\n    private tokens: Token[];\r\n\r\n    constructor(tokens: Token[]) {\r\n        this.tokens = tokens;\r\n    }\r\n\r\n    public parse(): Stmt.Stmt[] {\r\n       const statements: Stmt.Stmt[] = [];\r\n       while (!this.eof()) {\r\n           statements.push(this.declaration());\r\n       }\r\n       return statements;\r\n    }\r\n\r\n    private match(...types: TokenType[]): boolean {\r\n        for (const type of types) {\r\n            if (this.check(type)) {\r\n                this.advance();\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private advance(): Token {\r\n        if (!this.eof()) {\r\n            this.current++;\r\n        }\r\n        return this.previous();\r\n    }\r\n\r\n    private peek(): Token {\r\n        return this.tokens[this.current];\r\n    }\r\n\r\n    private previous(): Token {\r\n        return this.tokens[this.current - 1];\r\n    }\r\n\r\n    private check(type: TokenType): boolean {\r\n        return this.peek().type === type;\r\n    }\r\n\r\n    private eof(): boolean {\r\n        return this.check(TokenType.eof);\r\n    }\r\n\r\n    private consume(type: TokenType, message: string): Token {\r\n        if (this.check(type)) {\r\n            return this.advance();\r\n        }\r\n\r\n        return this.parseError(this.peek(), message);\r\n    }\r\n\r\n    private parseError(token: Token, message: string) {\r\n        // tslint:disable-next-line\r\n        if (token.type == TokenType.eof) {\r\n            conzole.error(`Error in (${token.line}): at end ${message}`);\r\n        } else {\r\n            conzole.error(`Error in (${token.line}): at \"${token.lexeme}\" ${message}`);\r\n        }\r\n\r\n        throw new Error ('Error parsing');\r\n        // unreachable code\r\n        return new Token('panic', 'error', 'error', 0);\r\n    }\r\n\r\n    private synchronize(): void {\r\n        this.advance();\r\n\r\n        while (!this.eof()) {\r\n            if (this.previous().type === TokenType.semicolon) {\r\n                return;\r\n            }\r\n\r\n            switch (this.peek().type) {\r\n                case TokenType.class:\r\n                case TokenType.function:\r\n                case TokenType.var:\r\n                case TokenType.for:\r\n                case TokenType.if:\r\n                case TokenType.while:\r\n                case TokenType.print:\r\n                case TokenType.return:\r\n                    return;\r\n            }\r\n            this.advance();\r\n        }\r\n    }\r\n\r\n    private declaration(): Stmt.Stmt {\r\n        try {\r\n            if (this.match(TokenType.class)) {\r\n                return this.classDeclaration();\r\n            }\r\n            if (this.match(TokenType.function, TokenType.func)) {\r\n                return this.funcDeclaration(\"function\");\r\n            }\r\n            if (this.match(TokenType.var, TokenType.let)) {\r\n                return this.varDeclaration(this.previous());\r\n            }\r\n            return this.statement();\r\n        } catch (error) {\r\n            throw new Error('Error parsing. Execution has been stopped');\r\n            // TODO: reenable synchronize\r\n            // this.synchronize();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private classDeclaration(): Stmt.Class {\r\n        const name: Token = this.consume(TokenType.identifier, `Expected a class name`);\r\n        this.consume(TokenType.leftBrace, `Expected \"{\" after class name`);\r\n        const methods: Stmt.Func[] = [];\r\n\r\n        while (!this.check(TokenType.rightBrace) && !this.eof()) {\r\n            methods.push(this.funcDeclaration(\"method\"));\r\n        }\r\n\r\n        this.consume(TokenType.rightBrace, `Expected \"}\" after class \"${name.literal}\" methods`);\r\n        return new Stmt.Class(name, methods);\r\n    }\r\n\r\n    private funcDeclaration(kind: string): Stmt.Func {\r\n        const name: Token = this.consume(TokenType.identifier, `Expected a ${kind} name`);\r\n        return this.funcArgsBody(name, \"function\");\r\n    }\r\n    private funcArgsBody(name: Token, kind: string): Stmt.Func {\r\n        this.consume(TokenType.leftParen, `Expected \"(\" after ${kind}`);\r\n        const params: Token[] = [];\r\n\r\n        if (!this.check(TokenType.rightParen)) {\r\n            do {\r\n                if (params.length >= 255) {\r\n                    this.parseError(this.peek(), `Parameter count exceeds 255`);\r\n                }\r\n                params.push(this.consume(TokenType.identifier, `Expected a parameter name`));\r\n            } while (this.match(TokenType.comma));\r\n        }\r\n        this.consume(TokenType.rightParen, `Expect \")\" after parameters`);\r\n        this.consume(TokenType.leftBrace, `Expect \"{\" before ${kind} body`);\r\n        const body: Stmt.Stmt[] = this.block();\r\n        return new Stmt.Func(name, params, body);\r\n    }\r\n\r\n    private varDeclaration(type: Token): Stmt.Stmt {\r\n        const name: Token = this.consume(TokenType.identifier, `Expected a variable name`);\r\n        let initializer: Expr.Expr  = null;\r\n        if (this.match(TokenType.equal)) {\r\n            initializer = this.expression();\r\n        }\r\n        this.consume(TokenType.semicolon, `Expected semicolon \";\" after a value.`);\r\n\r\n        return new Stmt.Var(name, type, initializer);\r\n    }\r\n\r\n    private statement() {\r\n        if (this.match(TokenType.if)) {\r\n            return this.ifStatement();\r\n        }\r\n        if (this.match(TokenType.print)) {\r\n            return this.printStatement();\r\n        }\r\n        if (this.match(TokenType.do)) {\r\n            return this.doWhileStatement();\r\n        }\r\n        if (this.match(TokenType.while)) {\r\n            return this.whileStatement();\r\n        }\r\n        if (this.match(TokenType.for)) {\r\n            return this.forStatement();\r\n        }\r\n        if (this.match(TokenType.leftBrace)) {\r\n            return new Stmt.Block(this.block());\r\n        }\r\n        if (this.match(TokenType.return)) {\r\n            return this.returnStatement();\r\n        }\r\n        return this.expressionStatement();\r\n    }\r\n\r\n    private ifStatement(): Stmt.Stmt {\r\n        this.consume(TokenType.leftParen, `Expected \"(\" after an if`);\r\n        const condition: Expr.Expr = this.expression();\r\n        this.consume(TokenType.rightParen, `Expected \")\" after if condition`);\r\n        const thenStmt: Stmt.Stmt = this.statement();\r\n        let elseStmt: Stmt.Stmt =  null;\r\n        if (this.match(TokenType.else)) {\r\n            elseStmt = this.statement();\r\n        }\r\n        return new Stmt.If(condition, thenStmt, elseStmt);\r\n    }\r\n\r\n    private whileStatement(): Stmt.Stmt {\r\n        this.consume(TokenType.leftParen, `Expected \"(\" after a while statement`);\r\n        const condition: Expr.Expr = this.expression();\r\n        this.consume(TokenType.rightParen, `Expected \")\" after while condition`);\r\n        const loop: Stmt.Stmt = this.statement();\r\n        return new Stmt.While(condition, loop);\r\n    }\r\n\r\n    private forStatement(): Stmt.Stmt {\r\n        this.consume(TokenType.leftParen, `Expected \"(\" after a for statement`);\r\n\r\n        let initializer: Stmt.Stmt;\r\n        if (this.match(TokenType.semicolon)) {\r\n            initializer = null;\r\n        } else if (this.match(TokenType.var, TokenType.let)) {\r\n            initializer = this.varDeclaration(this.previous());\r\n        } else {\r\n            initializer = this.expressionStatement();\r\n        }\r\n        let condition: Expr.Expr;\r\n        if (!this.check(TokenType.semicolon)) {\r\n            condition = this.expression();\r\n        }\r\n        this.consume(TokenType.semicolon, `Expected \";\" after loop condition`);\r\n        let increment: Expr.Expr;\r\n        if (!this.check(TokenType.rightParen)) {\r\n            increment = this.expression();\r\n        }\r\n        this.consume(TokenType.rightParen, `Expected \";\" after loop condition`);\r\n        let body: Stmt.Stmt = this.statement();\r\n        if (increment !== null) {\r\n            body = new Stmt.Block([\r\n                body,\r\n                new Stmt.Expression(increment)\r\n            ]);\r\n        }\r\n        if (condition === null) {\r\n            condition = new Expr.Literal(true);\r\n        }\r\n        body = new Stmt.While(condition, body);\r\n        if (initializer !== null) {\r\n            body = new Stmt.Block([\r\n                initializer,\r\n                body\r\n            ]);\r\n        }\r\n        return body;\r\n    }\r\n\r\n    private doWhileStatement(): Stmt.Stmt {\r\n        const loop: Stmt.Stmt = this.statement();\r\n        this.consume(TokenType.while, `Expected condition after do statement`);\r\n        this.consume(TokenType.leftParen, `Expected \"(\" after a while`);\r\n        const condition: Expr.Expr = this.expression();\r\n        this.consume(TokenType.rightParen, `Expected \")\" after while condition`);\r\n        this.consume(TokenType.semicolon, `Expected semicolon \";\" after a do while condition`);\r\n        return new Stmt.DoWhile(loop, condition);\r\n    }\r\n\r\n    private printStatement(): Stmt.Stmt {\r\n        const value: Expr.Expr = this.expression();\r\n        this.consume(TokenType.semicolon, `Expected semicolon \";\" after a value.`);\r\n        return new Stmt.Print(value);\r\n    }\r\n\r\n    private returnStatement(): Stmt.Stmt {\r\n        const keyword: Token = this.previous();\r\n        let value = undefined;\r\n\r\n        if (!this.check(TokenType.semicolon)) {\r\n            value = this.expression();\r\n        }\r\n\r\n        this.consume(TokenType.semicolon, `Exected \";\" after return statement`);\r\n        return new Stmt.Return(keyword, value);\r\n    }\r\n\r\n    private block(): Stmt.Stmt[] {\r\n        const statements: Stmt.Stmt[] = [];\r\n        while (!this.check(TokenType.rightBrace) && !this.eof()) {\r\n            statements.push(this.declaration());\r\n        }\r\n        this.consume(TokenType.rightBrace, `Expected closing block \"}\"`);\r\n        return statements;\r\n    }\r\n\r\n    private expressionStatement(): Stmt.Stmt {\r\n        const expression: Expr.Expr = this.expression();\r\n        this.consume(TokenType.semicolon, `Expected semicolon \";\" after an expression`);\r\n        return new Stmt.Expression(expression);\r\n    }\r\n\r\n    private expression(): Expr.Expr {\r\n        return this.assignment();\r\n    }\r\n\r\n    private assignment(): Expr.Expr {\r\n        const expr: Expr.Expr = this.ternary();\r\n\r\n        if (this.match(TokenType.equal)) {\r\n            const equals: Token = this.previous();\r\n            const value: Expr.Expr = this.ternary();\r\n\r\n            if (expr instanceof Expr.Variable) {\r\n                const name: Token = expr.name;\r\n                return new Expr.Assign(name, value);\r\n            } else if (expr instanceof Expr.Get) {\r\n                return new Expr.Set(expr.entity, expr.key, value);\r\n            }\r\n\r\n            this.parseError(equals, `Invalid l-value, is not an assigning target.`);\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    private ternary(): Expr.Expr {\r\n        const expr = this.equality();\r\n        if (this.match(TokenType.question)) {\r\n            const thenExpr: Expr.Expr = this.equality();\r\n            this.consume(TokenType.colon, `Expected \":\" after ternary ? expression`);\r\n            const elseExpr: Expr.Expr = this.equality();\r\n            return new Expr.Ternary(expr, thenExpr, elseExpr);\r\n        }\r\n        return expr;\r\n    }\r\n\r\n    private equality(): Expr.Expr {\r\n        let expr  = this.comparison();\r\n\r\n        while (this.match(\r\n            TokenType.bangEqual, TokenType.equalEqual,\r\n            TokenType.bangEqualEqual, TokenType.equalEqualEqual)\r\n        ) {\r\n            const operator: Token = this.previous();\r\n            const right: Expr.Expr = this.comparison();\r\n            expr = new Expr.Binary(expr, operator, right);\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    private comparison(): Expr.Expr {\r\n        let expr: Expr.Expr = this.addition();\r\n\r\n        while (this.match(TokenType.greater, TokenType.greaterEqual, TokenType.less, TokenType.lessEqual)) {\r\n            const operator: Token = this.previous();\r\n            const right: Expr.Expr = this.addition();\r\n            expr = new Expr.Binary(expr, operator, right);\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    private addition(): Expr.Expr {\r\n        let expr: Expr.Expr = this.modulus();\r\n\r\n        while (this.match(TokenType.minus, TokenType.plus)) {\r\n            const operator: Token = this.previous();\r\n            const right: Expr.Expr = this.modulus();\r\n            expr = new Expr.Binary(expr, operator, right);\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    private modulus(): Expr.Expr {\r\n        let expr: Expr.Expr = this.multiplication();\r\n\r\n        while (this.match(TokenType.percent)) {\r\n            const operator: Token = this.previous();\r\n            const right: Expr.Expr = this.multiplication();\r\n            expr = new Expr.Binary(expr, operator, right);\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    private multiplication(): Expr.Expr {\r\n        let expr: Expr.Expr = this.unary();\r\n\r\n        while (this.match(TokenType.slash, TokenType.star)) {\r\n            const operator: Token = this.previous();\r\n            const right: Expr.Expr = this.unary();\r\n            expr = new Expr.Binary(expr, operator, right);\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    private unary(): Expr.Expr {\r\n        if (this.match(TokenType.minus, TokenType.bang, TokenType.dollar, TokenType.plusPlus, TokenType.minusMinus)) {\r\n            const operator: Token = this.previous();\r\n            const right: Expr.Expr = this.unary();\r\n            return new Expr.Unary(operator, right);\r\n        }\r\n\r\n        return this.newKeyword();\r\n    }\r\n\r\n    private newKeyword(): Expr.Expr {\r\n        if (this.match(TokenType.new)) {\r\n            const construct: Expr.Expr = this.call();\r\n            return new Expr.New(construct);\r\n\r\n        }\r\n        return this.call();\r\n    }\r\n\r\n    private call(): Expr.Expr {\r\n        let expr: Expr.Expr = this.primary();\r\n\r\n        while (true) {\r\n            if (this.match(TokenType.leftParen)) {\r\n                const args: Expr.Expr[] = [];\r\n                const callee = expr;\r\n                if (!this.check(TokenType.rightParen)) {\r\n                    do {\r\n                        args.push(this.expression());\r\n                    } while (this.match(TokenType.comma));\r\n                }\r\n                const paren: Token = this.consume(TokenType.rightParen, `Expected \")\" after arguments`);\r\n                return new Expr.Call(callee, paren, args);\r\n            } else if (this.match(TokenType.dot)) {\r\n                const name: Token = this.consume(TokenType.identifier, `Expect property name after '.'`);\r\n                const key: Expr.Key = new Expr.Key(name);\r\n                expr = new Expr.Get(expr, key);\r\n            } else if (this.match(TokenType.leftBracket)) {\r\n                const key: Expr.Expr = this.expression();\r\n                expr = new Expr.Get(expr, key);\r\n                this.consume(TokenType.rightBracket, `Expected \"]\" after property name expression`);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    private array(): Expr.Expr {\r\n        if (this.match(TokenType.leftBracket)) {\r\n            const arr = [];\r\n            if (this.match(TokenType.rightBracket)) {\r\n                return new Expr.Literal([]);\r\n            }\r\n            do {\r\n                arr.push(this.expression());\r\n            } while (this.match(TokenType.comma));\r\n            this.consume(TokenType.rightBracket, `Expected \"]\" after array declaration`);\r\n            return new Expr.Array(arr);\r\n        }\r\n        // return this.object();\r\n    }\r\n\r\n    private primary(): Expr.Expr {\r\n        if (this.match(TokenType.false)) {\r\n            return new Expr.Literal(false);\r\n        }\r\n        if (this.match(TokenType.true)) {\r\n            return new Expr.Literal(true);\r\n        }\r\n        if (this.match(TokenType.null)) {\r\n             return new Expr.Literal(null);\r\n        }\r\n        if (this.match(TokenType.number, TokenType.string)) {\r\n            return new Expr.Literal(this.previous().literal);\r\n        }\r\n        if (this.match(TokenType.identifier)) {\r\n            const identifier =  this.previous();\r\n            return new Expr.Variable(identifier);\r\n        }\r\n        if (this.match(TokenType.leftParen)) {\r\n            const expr: Expr.Expr = this.expression();\r\n            this.consume(TokenType.rightParen, `Expected \")\" after expression`);\r\n            return new Expr.Grouping(expr);\r\n        }\r\n        if (this.match(TokenType.leftBrace)) {\r\n            return this.entity();\r\n        }\r\n\r\n        if (this.match(TokenType.func, TokenType.function)) {\r\n            const token: Token = new Token('lambda', 'lambda', 'lambda', this.previous().line);\r\n            const lambda: Stmt.Func = this.funcArgsBody(token, \"lambda\");\r\n            return new Expr.Lambda(lambda);\r\n        }\r\n\r\n        throw this.parseError(this.peek(), `Expected expression`);\r\n        // unreacheable code\r\n        return new Expr.Literal(null);\r\n    }\r\n\r\n    public entity(): Expr.Expr {\r\n        if (this.match(TokenType.rightBrace)) {\r\n            return new Expr.Entity(null);\r\n        }\r\n        const properties: Expr.Set[] = [];\r\n        do {\r\n            if (this.match(TokenType.string, TokenType.identifier)) {\r\n                const key: Token = this.previous();\r\n                this.consume(TokenType.colon, `Expected \":\" colon after member`);\r\n                const value = this.expression();\r\n                properties.push(new Expr.Set(null, new Expr.Key(key), value));\r\n            } else {\r\n                this.parseError(this.peek(), `String or identifier expected after Object {`);\r\n            }\r\n        } while (this.match(TokenType.comma));\r\n        this.consume(TokenType.rightBrace, `Expected \"}\" after object literal`);\r\n        return new Expr.Entity(properties);\r\n    }\r\n\r\n    /*\r\n    public indexes(identifier: Token) {\r\n        const indexes: Expr.Expr[] = [];\r\n        do {\r\n            const separator = this.previous();\r\n            if (separator.type === TokenType.leftBracket) {\r\n                indexes.push(this.expression());\r\n                this.consume(TokenType.rightBracket, `Expected bracket closing \"]\" after array`);\r\n             } else {\r\n                if (this.match(TokenType.identifier, TokenType.number)) {\r\n                    indexes.push(new Expr.Literal(this.previous().literal));\r\n                }\r\n            }\r\n        } while (this.match(TokenType.leftBracket, TokenType.dot));\r\n        return new Expr.Variable(identifier, indexes);\r\n    }*/\r\n\r\n}\r\n","import { Console } from './console';\r\ndeclare var conzole: Console;\r\n\r\nexport class Prototype {\r\n\r\n    private values: Map<string, any>;\r\n    private parent: Prototype;\r\n\r\n    constructor(parent: Prototype = null) {\r\n        this.values = new Map();\r\n        this.parent = parent;\r\n    }\r\n\r\n    public set(name: string, value: any): void {\r\n        this.values.set(name, value);\r\n    }\r\n\r\n    public get(key: string): any {\r\n        if (this.values.has(key)) {\r\n            return this.values.get(key);\r\n        }\r\n        if (this.parent !== null ) {\r\n            return this.parent.get(name);\r\n        }\r\n        conzole.error(`${key} is not defined in prototype`);\r\n    }\r\n\r\n}\r\n","export class Return extends Error {\r\n    public value: any;\r\n\r\n    constructor(value: any) {\r\n        super();\r\n        this.value = value;\r\n    }\r\n}\r\n","import { Token, TokenType } from '../src/token';\r\nimport { Console } from './console';\r\ndeclare var conzole: Console;\r\n\r\nconst isDigit = (char: string) => char >= '0' && char <= '9';\r\n\r\nconst isAlpha = (char: string ) => (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z');\r\n\r\nconst isAlphaNumeric = (char: string) => isAlpha(char) || isDigit(char);\r\n\r\nconst isKeyword = (word: string) => TokenType[word] >= 23;\r\n\r\nexport class Scanner {\r\n\r\n    public source: string;\r\n    public tokens: Token[] = [];\r\n    private current = 0;\r\n    private line = 1;\r\n    private start = 0;\r\n\r\n    constructor(source: string) {\r\n        this.source = source;\r\n    }\r\n\r\n    private eof() {\r\n        return this.current >= this.source.length;\r\n    }\r\n\r\n    private advance() {\r\n        this.current++;\r\n        return this.source.charAt(this.current - 1);\r\n    }\r\n\r\n    private addToken(tokenName: string, literal: any) {\r\n        const text = this.source.substring(this.start, this.current);\r\n        this.tokens.push(new Token(tokenName, text, literal, this.line));\r\n    }\r\n\r\n    private match(expected: string) {\r\n        if (this.eof()) {\r\n            return false;\r\n        }\r\n\r\n        if (this.source.charAt(this.current) !== expected) {\r\n            return false;\r\n        }\r\n\r\n        this.current++;\r\n        return true;\r\n    }\r\n\r\n    private peek() {\r\n        if (this.eof()) {\r\n            return '\\0';\r\n        }\r\n        return this.source.charAt(this.current);\r\n    }\r\n\r\n    private peekNext() {\r\n        if (this.current + 1 >= this.source.length) {\r\n            return '\\0';\r\n        }\r\n        return this.source.charAt(this.current + 1);\r\n    }\r\n\r\n    private comment() {\r\n        while (this.peek() !== '\\n' && !this.eof()) {\r\n            this.advance();\r\n        }\r\n    }\r\n\r\n    private string(quote: string) {\r\n        while (this.peek() !== quote && !this.eof()) {\r\n            if (this.peek() == '\\n') {\r\n                this.line++;\r\n            }\r\n            this.advance();\r\n        }\r\n\r\n        // Unterminated string.\r\n        if (this.eof()) {\r\n            this.scanError(`Unterminated string, expecting closing ${quote}`);\r\n            return;\r\n        }\r\n\r\n        // The closing \".\r\n        this.advance();\r\n\r\n        // Trim the surrounding quotes.\r\n        const value = this.source.substring(this.start + 1, this.current - 1);\r\n        this.addToken('string', value);\r\n    }\r\n\r\n    private number() {\r\n        // gets integer part\r\n        while (isDigit(this.peek())) {\r\n            this.advance();\r\n        }\r\n\r\n        // checks for fraction\r\n        if (this.peek() == '.' && isDigit(this.peekNext())) {\r\n            this.advance();\r\n        }\r\n\r\n        // gets fraction part\r\n        while (isDigit(this.peek())) {\r\n            this.advance();\r\n        }\r\n\r\n        const value = this.source.substring(this.start , this.current);\r\n        this.addToken('number', Number(value));\r\n    }\r\n\r\n    private identifier() {\r\n        while (isAlphaNumeric(this.peek())) {\r\n            this.advance();\r\n        }\r\n\r\n        const value = this.source.substring(this.start, this.current);\r\n\r\n        if (isKeyword(value)) {\r\n            this.addToken(value, null);\r\n        } else {\r\n            this.addToken('identifier', value);\r\n        }\r\n    }\r\n\r\n    public scan() {\r\n        while (!this.eof()) {\r\n            this.start = this.current;\r\n            this.scanToken();\r\n        }\r\n\r\n        this.tokens.push(new Token('eof', '', null, this.line));\r\n        return this.tokens;\r\n    }\r\n\r\n    private scanToken() {\r\n        const char = this.advance();\r\n        switch (char) {\r\n            case '(': this.addToken('leftParen', null); break;\r\n            case ')': this.addToken('rightParen', null); break;\r\n            case '[': this.addToken('leftBracket', null); break;\r\n            case ']': this.addToken('rightBracket', null); break;\r\n            case '{': this.addToken('leftBrace', null); break;\r\n            case '}': this.addToken('rightBrace', null); break;\r\n            case ',': this.addToken('comma', null); break;\r\n            case '.': this.addToken('dot', null); break;\r\n            case ';': this.addToken('semicolon', null); break;\r\n            case '*': this.addToken('star', null); break;\r\n            case '^': this.addToken('caret', null); break;\r\n            case '?': this.addToken('question', null); break;\r\n            case ':': this.addToken('colon', null); break;\r\n            case '%': this.addToken('percent', null); break;\r\n            case '$': this.addToken('dollar', null); break;\r\n            case '-': this.addToken(this.match('-') ? 'minusMinus' : 'minus', null); break;\r\n            case '+': this.addToken(this.match('+') ? 'plusPlus' : 'plus', null); break;\r\n            case '|': this.addToken(this.match('|') ? 'or' : 'pipe', null); break;\r\n            case '<': this.addToken(this.match('=') ? 'lessEqual' : 'less', null); break;\r\n            case '>': this.addToken(this.match('=') ? 'greaterEqual' : 'greater', null); break;\r\n            case '!': this.addToken(this.match('=') ? this.match('=') ? 'bangEqualEqual' : 'bangEqual' : 'bang', null); break;\r\n            case '=': this.addToken(this.match('=') ? this.match('=') ? 'equalEqualEqual': 'equalEqual' : 'equal', null); break;\r\n            case '/':\r\n                if (this.match('/')) {\r\n                    this.comment();\r\n                } else {\r\n                    this.addToken('slash', null);\r\n                }\r\n                break;\r\n            case '\\n': this.line++; break;\r\n            case `'`:\r\n            case `\"`:\r\n                this.string(char);\r\n                break;\r\n            // ignore cases\r\n            case ' ':\r\n            case '\\r':\r\n            case '\\t':\r\n                break;\r\n            // compex cases\r\n            default:\r\n                if (isDigit(char)) {\r\n                    this.number();\r\n                } else if (isAlpha(char)) {\r\n                    this.identifier();\r\n                } else {\r\n                    this.scanError(`Unexpected character '${char}'`);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    private scanError(message: string): void {\r\n        conzole.error(`Error at (${this.line}):  ${message}`);\r\n        throw new Error('Error while scanning. Execution has been stoped');\r\n    }\r\n\r\n}\r\n","import { Token } from './token';\r\nimport { Console } from './console';\r\ndeclare var conzole: Console;\r\n\r\nexport class Scope {\r\n\r\n    private values: Map<string, any>;\r\n    private parent: Scope;\r\n\r\n    constructor(parent: Scope = null) {\r\n        this.values = new Map();\r\n        this.parent = parent;\r\n    }\r\n\r\n    public set(name: string, value: any) {\r\n        this.values.set(name, value);\r\n    }\r\n\r\n    public define(name: string, value: any) {\r\n        if (this.values.has(name)) {\r\n            conzole.error(`identifier \"${name}\" has already been declared`)\r\n        } else {\r\n            this.set(name, value);\r\n        }\r\n    }\r\n\r\n    public assign(name: string, value: any): void {\r\n        if (this.values.has(name)) {\r\n            this.set(name, value);\r\n        } else {\r\n            if (this.parent !== null) {\r\n                return this.parent.assign(name, value);\r\n            }\r\n            conzole.error(`Identifier \"${name}\" has not been declared`)\r\n        }\r\n    }\r\n\r\n    public get(name: Token): any {\r\n        if (this.values.has(name.lexeme)) {\r\n            return this.values.get(name.lexeme);\r\n        }\r\n        if (this.parent !== null ) {\r\n            return this.parent.get(name);\r\n        } else {\r\n            // this is global scope\r\n            /**\r\n             * TODO: reconsider this\r\n             * its injecting javascript global scope into application\r\n             */\r\n            if (typeof window[name.lexeme] !== 'undefined') {\r\n                this.values.set(name.lexeme, window[name.lexeme]);\r\n                return this.values.get(name.lexeme);\r\n            }\r\n        }\r\n        conzole.error(`Error at (${name.line}): ${name.lexeme} is not defined`)\r\n    }\r\n\r\n}\r\n","import { Token } from 'token';\n\nimport { Expr } from 'expression';\n\nexport abstract class Stmt {\n    constructor() {}\n    abstract accept<R>(visitor: StmtVisitor<R>): R;\n}\n\nexport interface StmtVisitor<R> {\n\tvisitBlockStmt(stmt: Block): R;\n\tvisitExpressionStmt(stmt: Expression): R;\n\tvisitIfStmt(stmt: If): R;\n\tvisitFuncStmt(stmt: Func): R;\n\tvisitClassStmt(stmt: Class): R;\n\tvisitReturnStmt(stmt: Return): R;\n\tvisitWhileStmt(stmt: While): R;\n\tvisitDoWhileStmt(stmt: DoWhile): R;\n\tvisitPrintStmt(stmt: Print): R;\n\tvisitVarStmt(stmt: Var): R;\n}\n\nexport class Block extends Stmt {\n\tpublic statements: Stmt[];\n\n\tconstructor(statements: Stmt[]) {\n\t\tsuper();\n\t\tthis.statements = statements;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitBlockStmt(this);\n    }\n}\n\nexport class Expression extends Stmt {\n\tpublic expression: Expr;\n\n\tconstructor(expression: Expr) {\n\t\tsuper();\n\t\tthis.expression = expression;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitExpressionStmt(this);\n    }\n}\n\nexport class If extends Stmt {\n\tpublic condition: Expr;\n\tpublic thenStmt: Stmt;\n\tpublic elseStmt: Stmt;\n\n\tconstructor(condition: Expr, thenStmt: Stmt, elseStmt: Stmt) {\n\t\tsuper();\n\t\tthis.condition = condition;\n\t\tthis.thenStmt = thenStmt;\n\t\tthis.elseStmt = elseStmt;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitIfStmt(this);\n    }\n}\n\nexport class Func extends Stmt {\n\tpublic name: Token;\n\tpublic params: Token[];\n\tpublic body: Stmt[];\n\n\tconstructor(name: Token, params: Token[], body: Stmt[]) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.params = params;\n\t\tthis.body = body;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitFuncStmt(this);\n    }\n}\n\nexport class Class extends Stmt {\n\tpublic name: Token;\n\tpublic methods: Func[];\n\n\tconstructor(name: Token, methods: Func[]) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.methods = methods;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitClassStmt(this);\n    }\n}\n\nexport class Return extends Stmt {\n\tpublic keyword: Token;\n\tpublic value: Expr;\n\n\tconstructor(keyword: Token, value: Expr) {\n\t\tsuper();\n\t\tthis.keyword = keyword;\n\t\tthis.value = value;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitReturnStmt(this);\n    }\n}\n\nexport class While extends Stmt {\n\tpublic condition: Expr;\n\tpublic loop: Stmt;\n\n\tconstructor(condition: Expr, loop: Stmt) {\n\t\tsuper();\n\t\tthis.condition = condition;\n\t\tthis.loop = loop;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitWhileStmt(this);\n    }\n}\n\nexport class DoWhile extends Stmt {\n\tpublic loop: Stmt;\n\tpublic condition: Expr;\n\n\tconstructor(loop: Stmt, condition: Expr) {\n\t\tsuper();\n\t\tthis.loop = loop;\n\t\tthis.condition = condition;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitDoWhileStmt(this);\n    }\n}\n\nexport class Print extends Stmt {\n\tpublic expression: Expr;\n\n\tconstructor(expression: Expr) {\n\t\tsuper();\n\t\tthis.expression = expression;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitPrintStmt(this);\n    }\n}\n\nexport class Var extends Stmt {\n\tpublic name: Token;\n\tpublic type: Token;\n\tpublic initializer: Expr;\n\n\tconstructor(name: Token, type: Token, initializer: Expr) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.type = type;\n\t\tthis.initializer = initializer;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitVarStmt(this);\n    }\n}\n\n\n","export enum TokenType {\r\n    // parser tokens\r\n    eof,\r\n    panic,\r\n    lambda,\r\n\r\n    // single character tokens\r\n    leftParen,\r\n    rightParen,\r\n    leftBracket,\r\n    rightBracket,\r\n    leftBrace,\r\n    rightBrace,\r\n    comma,\r\n    dot,\r\n    semicolon,\r\n    slash,\r\n    star,\r\n    pipe,\r\n    caret,\r\n    percent,\r\n    dollar,\r\n\r\n    // one or two character tokens\r\n    minus,\r\n    minusMinus,\r\n    plus,\r\n    plusPlus,\r\n    bang,\r\n    bangEqual,\r\n    equal,\r\n    equalEqual,\r\n    greater,\r\n    greaterEqual,\r\n    less,\r\n    lessEqual,\r\n    colon,\r\n    question,\r\n\r\n    // three character tokens\r\n    bangEqualEqual,\r\n    equalEqualEqual,\r\n\r\n    // literals\r\n    identifier,\r\n    string,\r\n    number,\r\n\r\n    // keywords\r\n    and,\r\n    class,\r\n    do,\r\n    else,\r\n    false,\r\n    function,\r\n    func,\r\n    for,\r\n    if,\r\n    new,\r\n    null,\r\n    or,\r\n    print,\r\n    return,\r\n    super,\r\n    true,\r\n    var,\r\n    let,\r\n    while\r\n}\r\n\r\nexport class Token {\r\n    public name: string;\r\n    public line: number;\r\n    public type: TokenType;\r\n    public literal: any;\r\n    public lexeme: string;\r\n\r\n    constructor(name: string, lexeme: string, literal: any, line: number) {\r\n        this.name = name;\r\n        this.type = TokenType[name];\r\n        this.lexeme = lexeme;\r\n        this.literal = literal;\r\n        this.line = line;\r\n\r\n    }\r\n\r\n    public toString() {\r\n        return `${this.name}:  ${this.lexeme}  ${this.literal}`;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}