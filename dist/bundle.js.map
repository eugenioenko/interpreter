{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/callable.ts","webpack:///./src/console.ts","webpack:///./src/demo.ts","webpack:///./src/expression.ts","webpack:///./src/index.ts","webpack:///./src/interpreter.ts","webpack:///./src/parser.ts","webpack:///./src/prototype.ts","webpack:///./src/return.ts","webpack:///./src/scanner.ts","webpack:///./src/scope.ts","webpack:///./src/statement.ts","webpack:///./src/token.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgC;AACE;AACM;AAGjC,MAAM,cAAc;IAA3B;QAEW,aAAQ,GAAiB,GAAG,EAAE,CAAC,mBAAmB,CAAC;IAE9D,CAAC;CAAA;AAEM,MAAM,eAAe;IAIxB;QACI,IAAI,CAAC,SAAS,GAAG,IAAI,oDAAS,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;QAE5B,MAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;QAC5C,cAAc,CAAC,IAAI,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,cAAc,CAAC,QAAQ,GAAG,GAAG,EAAE,CAAC,gBAAgB,CAAC;QACjD,cAAc,CAAC,KAAK,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;QAC/B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;QAE5D,MAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;QAC5C,cAAc,CAAC,IAAI,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;QAChE,cAAc,CAAC,QAAQ,GAAG,GAAG,EAAE,CAAC,gBAAgB,CAAC;QACjD,cAAc,CAAC,KAAK,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;QAC/B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;IACxD,CAAC;IAEM,GAAG,CAAC,GAAW;QAClB,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAC1B,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACnC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;IAEM,GAAG,CAAC,GAAW,EAAE,KAAU;QAC9B,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACpC,CAAC;IAEM,QAAQ;QACX,OAAO,QAAQ,CAAC;IACpB,CAAC;CACJ;AAEM,MAAM,cAAe,SAAQ,eAAe;IAE/C;QACI,KAAK,EAAE,CAAC;IACZ,CAAC;IAEM,KAAK;QACR,OAAO,CAAC,CAAC;IACb,CAAC;IAEM,IAAI,CAAC,WAAwB,EAAE,IAAS,EAAE,IAAW,IAAS,OAAO,CAAC,CAAC;IACvE,QAAQ;QACX,OAAO,qBAAqB,CAAC;IACjC,CAAC;CAEJ;AAEM,MAAM,cAAe,SAAQ,cAAc;IAK9C,YAAY,WAAsB,EAAE,OAAc;QAC9C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC;IAC7C,CAAC;IAEM,QAAQ;QACX,OAAO,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC;IAC7D,CAAC;IAEM,KAAK;QACR,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC;IAC1C,CAAC;IAEM,IAAI,CAAC,WAAwB,EAAE,IAAS,EAAE,IAAW;QACxD,MAAM,KAAK,GAAG,IAAI,4CAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrD,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SAC5D;QACD,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACxB,IAAI;YACA,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SAC1D;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,8CAAM,EAAE;gBACrB,OAAO,CAAC,CAAC,KAAK,CAAC;aAClB;SACJ;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;CAEJ;AAEM,MAAM,cAAe,SAAQ,cAAc;IAE9C,YAAY,SAAyB;QACjC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC;QACjC,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,IAAI,oDAAS,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IACpF,CAAC;IAEM,GAAG,CAAC,GAAW;QAClB,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAC1B,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACnC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC/B,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,UAAU,kBAAkB,GAAG,EAAE,CAAC,CAAC;IAC/D,CAAC;IAEM,GAAG,CAAC,GAAW,EAAE,KAAU;QAC9B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACnC,CAAC;IAEM,QAAQ;QACX,OAAO,GAAG,GAAG,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC;IAChD,CAAC;CACJ;AAEM,MAAM,cAAgB,SAAQ,cAAc;IAK/C,YAAY,IAAY,EAAE,OAAoB;QAC1C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,IAAI,oDAAS,CAAC,IAAI,EAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAChD,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC1B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;SAClD;IACL,CAAC;IAEM,KAAK;QACR,OAAO,CAAC,CAAC;IACb,CAAC;IAEM,IAAI,CAAC,WAAwB,EAAE,IAAW;QAC7C,MAAM,QAAQ,GAAoB,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC;QAC3D,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEM,QAAQ;QACX,OAAO,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;IACvC,CAAC;CAEJ;;;;;;;;;;;;;AC7JD;AAAA;AAAA;AAAA,IAAY,kBAKX;AALD,WAAY,kBAAkB;IAC1B,2DAAI;IACJ,6DAAK;IACL,iEAAO;IACP,2DAAI;AACR,CAAC,EALW,kBAAkB,KAAlB,kBAAkB,QAK7B;AAQM,MAAM,OAAO;IAIhB;QACI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACvB,CAAC;IAEO,GAAG,CAAC,OAAY,EAAE,IAAwB;QAC9C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YACf,IAAI,EAAE,OAAO;YACb,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,IAAI,IAAI,EAAE;SACnB,CAAC,CAAC;IACP,CAAC;IAEM,KAAK;QACR,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACvB,CAAC;IAEM,GAAG,CAAC,OAAY;QACnB,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAEM,IAAI,CAAC,OAAY;QACpB,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,kBAAkB,CAAC,OAAO,CAAC,CAAC;IAClD,CAAC;IAEM,KAAK,CAAC,OAAY;QACrB,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC5C,uBAAuB;IAC3B,CAAC;IAEM,IAAI,CAAC,OAAY;QACpB,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAEM,KAAK;QACR,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IACzD,CAAC;CAEJ;;;;;;;;;;;;;ACtDD;AAAA;AAAO,MAAM,cAAc,GAC3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyDC,CAAC;;;;;;;;;;;;;ACtDF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,MAAe,IAAI;IACtB,gBAAe,CAAC;CAEnB;AAmBM,MAAM,MAAO,SAAQ,IAAI;IAI/B,YAAY,IAAW,EAAE,KAAW;QACnC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACpB,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,QAAQ;QACN,OAAO,aAAa,CAAC;IACvB,CAAC;CACJ;AAEM,MAAM,MAAO,SAAQ,IAAI;IAK/B,YAAY,IAAU,EAAE,QAAe,EAAE,KAAW;QACnD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACpB,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,QAAQ;QACN,OAAO,aAAa,CAAC;IACvB,CAAC;CACJ;AAEM,MAAM,OAAQ,SAAQ,IAAI;IAKhC,YAAY,SAAe,EAAE,QAAc,EAAE,QAAc;QAC1D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC1B,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,QAAQ;QACN,OAAO,cAAc,CAAC;IACxB,CAAC;CACJ;AAEM,MAAM,IAAK,SAAQ,IAAI;IAM7B,YAAY,MAAY,EAAE,KAAY,EAAE,IAAY,EAAE,IAAS;QAC9D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,QAAQ;QACN,OAAO,WAAW,CAAC;IACrB,CAAC;CACJ;AAEM,MAAM,MAAO,SAAQ,IAAI;IAG/B,YAAY,UAAkB;QAC7B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC9B,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,QAAQ;QACN,OAAO,aAAa,CAAC;IACvB,CAAC;CACJ;AAEM,MAAM,GAAI,SAAQ,IAAI;IAI5B,YAAY,MAAY,EAAE,IAAW;QACpC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,QAAQ;QACN,OAAO,UAAU,CAAC;IACpB,CAAC;CACJ;AAEM,MAAM,GAAI,SAAQ,IAAI;IAK5B,YAAY,MAAY,EAAE,IAAW,EAAE,KAAW;QACjD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACpB,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,QAAQ;QACN,OAAO,UAAU,CAAC;IACpB,CAAC;CACJ;AAEM,MAAM,GAAI,SAAQ,IAAI;IAG5B,YAAY,SAAe;QAC1B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC5B,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,QAAQ;QACN,OAAO,UAAU,CAAC;IACpB,CAAC;CACJ;AAEM,MAAM,QAAS,SAAQ,IAAI;IAGjC,YAAY,UAAgB;QAC3B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC9B,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,QAAQ;QACN,OAAO,eAAe,CAAC;IACzB,CAAC;CACJ;AAEM,MAAM,OAAQ,SAAQ,IAAI;IAGhC,YAAY,KAAU;QACrB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACpB,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,QAAQ;QACN,OAAO,cAAc,CAAC;IACxB,CAAC;CACJ;AAEM,MAAM,KAAM,SAAQ,IAAI;IAI9B,YAAY,QAAe,EAAE,KAAW;QACvC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACpB,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,QAAQ;QACN,OAAO,YAAY,CAAC;IACtB,CAAC;CACJ;AAEM,MAAM,QAAS,SAAQ,IAAI;IAGjC,YAAY,IAAW;QACtB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,QAAQ;QACN,OAAO,eAAe,CAAC;IACzB,CAAC;CACJ;AAEM,MAAM,MAAO,SAAQ,IAAI;IAG/B,YAAY,MAAY;QACvB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACtB,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,QAAQ;QACN,OAAO,aAAa,CAAC;IACvB,CAAC;CACJ;AAEM,MAAM,KAAM,SAAQ,IAAI;IAG9B,YAAY,KAAa;QACxB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACpB,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,QAAQ;QACN,OAAO,YAAY,CAAC;IACtB,CAAC;CACJ;;;;;;;;;;;;;AC9RD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoC;AACF;AACU;AACR;AACI;AAElC,MAAO,CAAC,OAAO,GAAG,IAAI,gDAAO,EAAE,CAAC;AAChC,MAAO,CAAC,cAAc,GAAG,oDAAc,CAAC;AACxC,MAAO,CAAC,OAAO,GAAG,UAAS,MAAc;IAC3C;;;;;;;;;MASE;IAGF,OAAO,CAAC,IAAI,wDAAW,EAAE,CAAC,QAAQ,CAAC,CAAC,IAAI,8CAAM,CAAC,CAAC,IAAI,gDAAO,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AAC5F,CAAC;;;;;;;;;;;;;ACtBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;AAEwF;AAE3F;AACF;AACI;AAI7B,MAAM,WAAW;IAMpB;QAHO,WAAM,GAAG,IAAI,4CAAK,EAAE,CAAC;QACpB,UAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QAGxB,MAAM,IAAI,GAAG,IAAI,wDAAc,EAAE,CAAC;QAClC,IAAI,CAAC,IAAI,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,GAAG,EAAE,CAAC,mBAAmB,CAAC;QAC1C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAEjC,MAAM,IAAI,GAAG,IAAI,wDAAc,EAAE,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,GAAG,EAAE,CAAC,mBAAmB,CAAC;QAC1C,IAAI,CAAC,IAAI,GAAG,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9D,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAEjC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IAE/D,CAAC;IAEO,QAAQ,CAAC,IAAe;QAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAEO,OAAO,CAAC,IAAe;QAC3B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;IAEM,QAAQ,CAAC,UAAuB;QACnC,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;YAChC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SAC3B;IACL,CAAC;IAEM,mBAAmB,CAAC,IAAqB;QAC5C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACnC,CAAC;IAEM,cAAc,CAAC,IAAgB;QAClC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC;IAEM,YAAY,CAAC,IAAc;QAC9B,IAAI,KAAK,GAAW,IAAI,CAAC;QACzB,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE;YAC3B,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC3C;QAED,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,gDAAS,CAAC,GAAG,EAAG;YACnC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SAC3C;aAAM;YACH,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SAC9C;IACL,CAAC;IAEM,iBAAiB,CAAC,IAAmB;QACxC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAEM,cAAc,CAAC,IAAgB;QAClC,MAAM,GAAG,GAAU,EAAE,CAAC;QACtB,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,KAAK,EAAE;YACjC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;SACvC;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IAEM,eAAe,CAAC,IAAiB;QACpC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC/C,CAAC;IAEM,eAAe,CAAC,IAAiB;QACpC,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxC,QAAQ,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;YACxB,KAAK,gDAAS,CAAC,KAAK;gBAChB,OAAgB,IAAI,GAAY,KAAK,CAAC;YAC1C,KAAK,gDAAS,CAAC,KAAK;gBAChB,OAAgB,IAAI,GAAY,KAAK,CAAC;YAC1C,KAAK,gDAAS,CAAC,IAAI;gBACf,OAAgB,IAAI,GAAY,KAAK,CAAC;YAC1C,KAAK,gDAAS,CAAC,OAAO;gBAClB,OAAgB,IAAI,GAAY,KAAK,CAAC;YAC1C,KAAK,gDAAS,CAAC,IAAI;gBACf,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBACvD,OAAgB,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;iBAClC;qBAAM;oBACH,OAAgB,IAAI,GAAY,KAAK,CAAC;iBACzC;YACL,KAAK,gDAAS,CAAC,IAAI;gBACf,OAAgB,IAAI,GAAY,KAAK,CAAC;YAC1C,KAAK,gDAAS,CAAC,KAAK;gBAChB,OAAgB,IAAI,GAAY,KAAK,CAAC;YAC1C,KAAK,gDAAS,CAAC,OAAO;gBAClB,OAAgB,IAAI,GAAY,KAAK,CAAC;YAC1C,KAAK,gDAAS,CAAC,YAAY;gBACvB,OAAgB,IAAI,IAAa,KAAK,CAAC;YAC3C,KAAK,gDAAS,CAAC,IAAI;gBACf,OAAgB,IAAI,GAAY,KAAK,CAAC;YAC1C,KAAK,gDAAS,CAAC,SAAS;gBACpB,OAAgB,IAAI,IAAa,KAAK,CAAC;YAC3C,KAAK,gDAAS,CAAC,UAAU;gBACrB,2BAA2B;gBAC3B,OAAO,IAAI,IAAI,KAAK,CAAC;YACzB,KAAK,gDAAS,CAAC,eAAe;gBAC1B,OAAO,IAAI,KAAK,KAAK,CAAC;YAC1B,KAAK,gDAAS,CAAC,SAAS;gBACpB,2BAA2B;gBAC3B,OAAO,IAAI,IAAI,KAAK,CAAC;YACzB,KAAK,gDAAS,CAAC,cAAc;gBACzB,OAAO,IAAI,KAAK,KAAK,CAAC;YAC1B;gBACI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACnB,OAAO,IAAI,CAAC,CAAC,cAAc;gBAC3B,MAAM;SACb;IACL,CAAC;IAEM,gBAAgB,CAAC,IAAkB;QACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvG,CAAC;IAEM,iBAAiB,CAAC,IAAmB;QACxC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC1C,CAAC;IAEM,gBAAgB,CAAC,IAAkB;QACtC,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAEM,cAAc,CAAC,IAAgB;QAClC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxC,QAAQ,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;YACxB,KAAK,gDAAS,CAAC,KAAK;gBAChB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC1B,KAAK,gDAAS,CAAC,IAAI;gBACf,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC3B,KAAK,gDAAS,CAAC,MAAM;gBACjB,OAAO,KAAK,CAAC,MAAM,CAAC;YACxB,KAAK,gDAAS,CAAC,QAAQ;gBACnB,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAkB,IAAI,CAAC,KAAM,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;gBACtE,OAAO,QAAQ,CAAC;YACpB,KAAK,gDAAS,CAAC,UAAU;gBACrB,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAkB,IAAI,CAAC,KAAM,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;gBACtE,OAAO,QAAQ,CAAC;YACpB;gBACI,OAAO,IAAI,CAAC,CAAC,wBAAwB;SAC5C;IACL,CAAC;IAEM,YAAY,CAAC,UAAuB,EAAE,SAAgB;QACzD,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;QACvB,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;YAChC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SAC3B;QACD,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC;IAC9B,CAAC;IAEM,cAAc,CAAC,IAAgB;QAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,4CAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAC9D,CAAC;IAEM,WAAW,CAAC,IAAa;QAC5B,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YAC/B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC/B;aAAM,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,EAAE;YAC/B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC/B;IACL,CAAC;IAEM,cAAc,CAAC,IAAgB;QAClC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YAClC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC3B;IACL,CAAC;IAEM,gBAAgB,CAAC,IAAkB;QACtC,GAAG;YACC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC3B,QAAQ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;IAC5C,CAAC;IAEM,aAAa,CAAC,IAAe;QAChC,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,IAAI,GAAG,EAAE,CAAC;QAChB,IAAI,IAAI,GAAQ,IAAI,CAAC;QACrB,IAAI,IAAI,CAAC,MAAM,YAAY,+CAAQ,EAAE;YACjC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC5C;aAAM,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;YAC3B,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;SACpB;QACD,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,IAAI,EAAE;YAC9B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;SACtC;QAED,IAAI,CAAC,CAAC,MAAM,YAAY,wDAAc,CAAC;YACnC,CAAC,CAAC,MAAM,YAAY,wDAAc,CAAC,EACrC;YACE,OAAO,CAAC,KAAK,CAAC,GAAG,MAAM,oBAAoB,CAAC,CAAC;YAC7C,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,MAAM,IAAI,GAAG,MAAwB,CAAC;QACtC,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,EAAE,EAAE;YAC9B,OAAO,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,KAAK,CAAC,IAAI,MAAM,MAAM,4CAA4C,IAAI,CAAC,KAAK,EAAE,YAAY,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;SAC9I;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACvC,CAAC;IAEM,YAAY,CAAC,IAAc;QAC9B,MAAM,SAAS,GAAG,IAAI,CAAC,SAAsB,CAAC;QAC9C,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC/C,MAAM,WAAW,GAAG,IAAI,wDAAc,CAAC,MAAM,CAAC,CAAC;QAC/C,SAAS,CAAC,IAAI,GAAG,WAAW,CAAC;QAC7B,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACzB,OAAO,WAAW,CAAC;IACvB,CAAC;IAEM,eAAe,CAAC,IAAiB;QACpC,MAAM,MAAM,GAAG,IAAI,yDAAe,EAAE,CAAC;QACrC,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE;YACpC,MAAM,GAAG,GAAI,QAAqB,CAAC,IAAI,CAAC,MAAM,CAAC;YAC/C,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAE,QAAqB,CAAC,KAAK,CAAC,CAAC;YAC1D,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC1B;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,cAAc,CAAC,IAAgB;QAClC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC1C,MAAM,QAAQ,GAAG,IAAI,wDAAc,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACpE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,YAAY,CAAC,IAAc;QAC9B,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,IAAI,MAAM,YAAY,yDAAe,EAAE;YACnC,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACvC;QACD,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,iCAAiC,CAAC,CAAC;QAC7D,MAAM,IAAI,KAAK,EAAE,CAAC;IACtB,CAAC;IAEM,YAAY,CAAC,IAAc;QAC9B,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,gEAAgE;QAChE,IAAI,OAAO,MAAM,CAAC,GAAG,KAAK,WAAW,EAAE;YACnC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,0BAA0B,CAAC,CAAC;SAC/D;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,MAA0B,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACzD,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,aAAa,CAAC,IAAe;QAChC,MAAM,IAAI,GAAmB,IAAI,wDAAc,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAClE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,eAAe,CAAC,IAAiB;QACpC,MAAM,MAAM,GAAc,IAAI,CAAC,MAAmB,CAAC;QACnD,MAAM,IAAI,GAAmB,IAAI,wDAAc,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACpE,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,eAAe,CAAC,IAAiB;QACpC,IAAI,KAAK,GAAG,SAAS,CAAC;QACtB,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACrC;QACD,MAAM,IAAI,8CAAM,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;CAEJ;;;;;;;;;;;;;ACnSD;AAAA;AAAA;AAAA;AAAA;AAA2C;AACN;AACD;AAI7B,MAAM,MAAM;IAIf,YAAY,MAAe;QAHnB,YAAO,GAAG,CAAC,CAAC;QAIhB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAEM,KAAK;QACT,MAAM,UAAU,GAAgB,EAAE,CAAC;QACnC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE;YAChB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;SACvC;QACD,OAAO,UAAU,CAAC;IACrB,CAAC;IAEO,KAAK,CAAC,GAAG,KAAkB;QAC/B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACtB,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gBAClB,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,OAAO;QACX,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE;YACb,IAAI,CAAC,OAAO,EAAE,CAAC;SAClB;QACD,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;IAEO,IAAI;QACR,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;IAEO,QAAQ;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;IACzC,CAAC;IAEO,KAAK,CAAC,IAAe;QACzB,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC;IACrC,CAAC;IAEO,GAAG;QACP,OAAO,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IAEO,OAAO,CAAC,IAAe,EAAE,OAAe;QAC5C,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;YAClB,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;SACzB;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;IAEO,UAAU,CAAC,KAAY,EAAE,OAAe;QAC5C,2BAA2B;QAC3B,IAAI,KAAK,CAAC,IAAI,IAAI,gDAAS,CAAC,GAAG,EAAE;YAC7B,OAAO,CAAC,KAAK,CAAC,aAAa,KAAK,CAAC,IAAI,aAAa,OAAO,EAAE,CAAC,CAAC;SAChE;aAAM;YACH,OAAO,CAAC,KAAK,CAAC,aAAa,KAAK,CAAC,IAAI,UAAU,KAAK,CAAC,MAAM,KAAK,OAAO,EAAE,CAAC,CAAC;SAC9E;QAED,MAAM,IAAI,KAAK,CAAE,eAAe,CAAC,CAAC;QAClC,mBAAmB;QACnB,OAAO,IAAI,4CAAK,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC;IAEO,WAAW;QACf,IAAI,CAAC,OAAO,EAAE,CAAC;QAEf,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE;YAChB,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,KAAK,gDAAS,CAAC,SAAS,EAAE;gBAC9C,OAAO;aACV;YAED,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE;gBACtB,KAAK,gDAAS,CAAC,KAAK,CAAC;gBACrB,KAAK,gDAAS,CAAC,QAAQ,CAAC;gBACxB,KAAK,gDAAS,CAAC,GAAG,CAAC;gBACnB,KAAK,gDAAS,CAAC,GAAG,CAAC;gBACnB,KAAK,gDAAS,CAAC,EAAE,CAAC;gBAClB,KAAK,gDAAS,CAAC,KAAK,CAAC;gBACrB,KAAK,gDAAS,CAAC,KAAK,CAAC;gBACrB,KAAK,gDAAS,CAAC,MAAM;oBACjB,OAAO;aACd;YACD,IAAI,CAAC,OAAO,EAAE,CAAC;SAClB;IACL,CAAC;IAEO,WAAW;QACf,IAAI;YACA,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,KAAK,CAAC,EAAE;gBAC7B,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;aAClC;YACD,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,QAAQ,EAAE,gDAAS,CAAC,IAAI,CAAC,EAAE;gBAChD,OAAO,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;aAC3C;YACD,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,GAAG,EAAE,gDAAS,CAAC,GAAG,CAAC,EAAE;gBAC1C,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC/C;YACD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;SAC3B;QAAC,OAAO,KAAK,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;YAC7D,6BAA6B;YAC7B,sBAAsB;YACtB,OAAO,IAAI,CAAC;SACf;IACL,CAAC;IAEO,gBAAgB;QACpB,MAAM,IAAI,GAAU,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,UAAU,EAAE,uBAAuB,CAAC,CAAC;QAChF,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,SAAS,EAAE,+BAA+B,CAAC,CAAC;QACnE,MAAM,OAAO,GAAgB,EAAE,CAAC;QAEhC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE;YACrD,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;SAChD;QAED,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,UAAU,EAAE,6BAA6B,IAAI,CAAC,OAAO,WAAW,CAAC,CAAC;QACzF,OAAO,IAAI,gDAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACzC,CAAC;IAEO,eAAe,CAAC,IAAY;QAChC,MAAM,IAAI,GAAU,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,UAAU,EAAE,cAAc,IAAI,OAAO,CAAC,CAAC;QAClF,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAC/C,CAAC;IACO,YAAY,CAAC,IAAW,EAAE,IAAY;QAC1C,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,SAAS,EAAE,sBAAsB,IAAI,EAAE,CAAC,CAAC;QAChE,MAAM,MAAM,GAAY,EAAE,CAAC;QAE3B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,UAAU,CAAC,EAAE;YACnC,GAAG;gBACC,IAAI,MAAM,CAAC,MAAM,IAAI,GAAG,EAAE;oBACtB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,6BAA6B,CAAC,CAAC;iBAC/D;gBACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,UAAU,EAAE,2BAA2B,CAAC,CAAC,CAAC;aAChF,QAAQ,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,KAAK,CAAC,EAAE;SACzC;QACD,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,UAAU,EAAE,6BAA6B,CAAC,CAAC;QAClE,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,SAAS,EAAE,qBAAqB,IAAI,OAAO,CAAC,CAAC;QACpE,MAAM,IAAI,GAAgB,IAAI,CAAC,KAAK,EAAE,CAAC;QACvC,OAAO,IAAI,+CAAS,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IAC7C,CAAC;IAEO,cAAc,CAAC,IAAW;QAC9B,MAAM,IAAI,GAAU,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,UAAU,EAAE,0BAA0B,CAAC,CAAC;QACnF,IAAI,WAAW,GAAe,IAAI,CAAC;QACnC,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,KAAK,CAAC,EAAE;YAC7B,WAAW,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;SACnC;QACD,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,SAAS,EAAE,uCAAuC,CAAC,CAAC;QAE3E,OAAO,IAAI,8CAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;IACjD,CAAC;IAEO,SAAS;QACb,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,EAAE,CAAC,EAAE;YAC1B,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;SAC7B;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,KAAK,CAAC,EAAE;YAC7B,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC;SAChC;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,EAAE,CAAC,EAAE;YAC1B,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;SAClC;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,KAAK,CAAC,EAAE;YAC7B,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC;SAChC;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,GAAG,CAAC,EAAE;YAC3B,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC;SAC9B;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,SAAS,CAAC,EAAE;YACjC,OAAO,IAAI,gDAAU,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;SACvC;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,MAAM,CAAC,EAAE;YAC9B,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;SACjC;QACD,OAAO,IAAI,CAAC,mBAAmB,EAAE,CAAC;IACtC,CAAC;IAEO,WAAW;QACf,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,SAAS,EAAE,0BAA0B,CAAC,CAAC;QAC9D,MAAM,SAAS,GAAc,IAAI,CAAC,UAAU,EAAE,CAAC;QAC/C,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,UAAU,EAAE,iCAAiC,CAAC,CAAC;QACtE,MAAM,QAAQ,GAAc,IAAI,CAAC,SAAS,EAAE,CAAC;QAC7C,IAAI,QAAQ,GAAe,IAAI,CAAC;QAChC,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,IAAI,CAAC,EAAE;YAC5B,QAAQ,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;SAC/B;QACD,OAAO,IAAI,6CAAO,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACtD,CAAC;IAEO,cAAc;QAClB,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,SAAS,EAAE,sCAAsC,CAAC,CAAC;QAC1E,MAAM,SAAS,GAAc,IAAI,CAAC,UAAU,EAAE,CAAC;QAC/C,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,UAAU,EAAE,oCAAoC,CAAC,CAAC;QACzE,MAAM,IAAI,GAAc,IAAI,CAAC,SAAS,EAAE,CAAC;QACzC,OAAO,IAAI,gDAAU,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC;IAEO,YAAY;QAChB,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,SAAS,EAAE,oCAAoC,CAAC,CAAC;QACxE,IAAI,WAAsB,CAAC;QAC3B,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,SAAS,CAAC,EAAE;YACjC,WAAW,GAAG,IAAI,CAAC;SACtB;aAAM,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,GAAG,EAAE,gDAAS,CAAC,GAAG,CAAC,EAAE;YACjD,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;SACtD;aAAM;YACH,WAAW,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC5C;QACD,IAAI,SAAoB,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,SAAS,CAAC,EAAE;YAClC,SAAS,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;SACjC;QACD,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,SAAS,EAAE,mCAAmC,CAAC,CAAC;QACvE,IAAI,SAAoB,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,UAAU,CAAC,EAAE;YACnC,SAAS,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;SACjC;QACD,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,UAAU,EAAE,mCAAmC,CAAC,CAAC;QACxE,IAAI,IAAI,GAAc,IAAI,CAAC,SAAS,EAAE,CAAC;QACvC,IAAI,SAAS,KAAK,IAAI,EAAE;YACpB,IAAI,GAAG,IAAI,gDAAU,CAAC;gBAClB,IAAI;gBACJ,IAAI,qDAAe,CAAC,SAAS,CAAC;aACjC,CAAC,CAAC;SACN;QACD,IAAI,SAAS,KAAK,IAAI,EAAE;YACpB,SAAS,GAAG,IAAI,mDAAY,CAAC,IAAI,CAAC,CAAC;SACtC;QACD,IAAI,GAAG,IAAI,gDAAU,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACvC,IAAI,WAAW,KAAK,IAAI,EAAE;YACtB,IAAI,GAAG,IAAI,gDAAU,CAAC;gBAClB,WAAW;gBACX,IAAI;aACP,CAAC,CAAC;SACN;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,gBAAgB;QACpB,MAAM,IAAI,GAAc,IAAI,CAAC,SAAS,EAAE,CAAC;QACzC,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,KAAK,EAAE,uCAAuC,CAAC,CAAC;QACvE,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,SAAS,EAAE,4BAA4B,CAAC,CAAC;QAChE,MAAM,SAAS,GAAc,IAAI,CAAC,UAAU,EAAE,CAAC;QAC/C,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,UAAU,EAAE,oCAAoC,CAAC,CAAC;QACzE,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,SAAS,EAAE,mDAAmD,CAAC,CAAC;QACvF,OAAO,IAAI,kDAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAC7C,CAAC;IAEO,cAAc;QAClB,MAAM,KAAK,GAAc,IAAI,CAAC,UAAU,EAAE,CAAC;QAC3C,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,SAAS,EAAE,uCAAuC,CAAC,CAAC;QAC3E,OAAO,IAAI,gDAAU,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAEO,eAAe;QACnB,MAAM,OAAO,GAAU,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,IAAI,KAAK,GAAG,SAAS,CAAC;QAEtB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,SAAS,CAAC,EAAE;YAClC,KAAK,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;SAC7B;QAED,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,SAAS,EAAE,oCAAoC,CAAC,CAAC;QACxE,OAAO,IAAI,iDAAW,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC3C,CAAC;IAEO,KAAK;QACT,MAAM,UAAU,GAAgB,EAAE,CAAC;QACnC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE;YACrD,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;SACvC;QACD,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,UAAU,EAAE,4BAA4B,CAAC,CAAC;QACjE,OAAO,UAAU,CAAC;IACtB,CAAC;IAEO,mBAAmB;QACvB,MAAM,UAAU,GAAc,IAAI,CAAC,UAAU,EAAE,CAAC;QAChD,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,SAAS,EAAE,gCAAgC,UAAU,aAAa,CAAC,CAAC;QAC3F,OAAO,IAAI,qDAAe,CAAC,UAAU,CAAC,CAAC;IAC3C,CAAC;IAEO,UAAU;QACd,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;IAC7B,CAAC;IAEO,UAAU;QACd,MAAM,IAAI,GAAc,IAAI,CAAC,OAAO,EAAE,CAAC;QAEvC,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,KAAK,CAAC,EAAE;YAC7B,MAAM,MAAM,GAAU,IAAI,CAAC,QAAQ,EAAE,CAAC;YACtC,MAAM,KAAK,GAAc,IAAI,CAAC,OAAO,EAAE,CAAC;YAExC,IAAI,IAAI,YAAY,oDAAa,EAAE;gBAC/B,MAAM,IAAI,GAAU,IAAI,CAAC,IAAI,CAAC;gBAC9B,OAAO,IAAI,kDAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aACvC;iBAAM,IAAI,IAAI,YAAY,+CAAQ,EAAE;gBACjC,MAAM,GAAG,GAAa,IAAgB,CAAC;gBACvC,OAAO,IAAI,+CAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aACpD;YAED,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,8CAA8C,CAAC,CAAC;SAC3E;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,OAAO;QACX,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC7B,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,QAAQ,CAAC,EAAE;YAChC,MAAM,QAAQ,GAAc,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC5C,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,KAAK,EAAE,yCAAyC,CAAC,CAAC;YACzE,MAAM,QAAQ,GAAc,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC5C,OAAO,IAAI,mDAAY,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;SACrD;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,QAAQ;QACZ,IAAI,IAAI,GAAI,IAAI,CAAC,UAAU,EAAE,CAAC;QAE9B,OAAO,IAAI,CAAC,KAAK,CACb,gDAAS,CAAC,SAAS,EAAE,gDAAS,CAAC,UAAU,EACzC,gDAAS,CAAC,cAAc,EAAE,gDAAS,CAAC,eAAe,CAAC,EACtD;YACE,MAAM,QAAQ,GAAU,IAAI,CAAC,QAAQ,EAAE,CAAC;YACxC,MAAM,KAAK,GAAc,IAAI,CAAC,UAAU,EAAE,CAAC;YAC3C,IAAI,GAAG,IAAI,kDAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;SACjD;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,UAAU;QACd,IAAI,IAAI,GAAc,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEtC,OAAO,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,OAAO,EAAE,gDAAS,CAAC,YAAY,EAAE,gDAAS,CAAC,IAAI,EAAE,gDAAS,CAAC,SAAS,CAAC,EAAE;YAC/F,MAAM,QAAQ,GAAU,IAAI,CAAC,QAAQ,EAAE,CAAC;YACxC,MAAM,KAAK,GAAc,IAAI,CAAC,QAAQ,EAAE,CAAC;YACzC,IAAI,GAAG,IAAI,kDAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;SACjD;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,QAAQ;QACZ,IAAI,IAAI,GAAc,IAAI,CAAC,OAAO,EAAE,CAAC;QAErC,OAAO,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,KAAK,EAAE,gDAAS,CAAC,IAAI,CAAC,EAAE;YAChD,MAAM,QAAQ,GAAU,IAAI,CAAC,QAAQ,EAAE,CAAC;YACxC,MAAM,KAAK,GAAc,IAAI,CAAC,OAAO,EAAE,CAAC;YACxC,IAAI,GAAG,IAAI,kDAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;SACjD;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,OAAO;QACX,IAAI,IAAI,GAAc,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5C,OAAO,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,OAAO,CAAC,EAAE;YAClC,MAAM,QAAQ,GAAU,IAAI,CAAC,QAAQ,EAAE,CAAC;YACxC,MAAM,KAAK,GAAc,IAAI,CAAC,cAAc,EAAE,CAAC;YAC/C,IAAI,GAAG,IAAI,kDAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;SACjD;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,cAAc;QAClB,IAAI,IAAI,GAAc,IAAI,CAAC,KAAK,EAAE,CAAC;QAEnC,OAAO,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,KAAK,EAAE,gDAAS,CAAC,IAAI,CAAC,EAAE;YAChD,MAAM,QAAQ,GAAU,IAAI,CAAC,QAAQ,EAAE,CAAC;YACxC,MAAM,KAAK,GAAc,IAAI,CAAC,KAAK,EAAE,CAAC;YACtC,IAAI,GAAG,IAAI,kDAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;SACjD;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,KAAK;QACT,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,KAAK,EAAE,gDAAS,CAAC,IAAI,EAAE,gDAAS,CAAC,MAAM,EAAE,gDAAS,CAAC,QAAQ,EAAE,gDAAS,CAAC,UAAU,CAAC,EAAE;YACzG,MAAM,QAAQ,GAAU,IAAI,CAAC,QAAQ,EAAE,CAAC;YACxC,MAAM,KAAK,GAAc,IAAI,CAAC,KAAK,EAAE,CAAC;YACtC,OAAO,IAAI,iDAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;SAC1C;QAED,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;IAC7B,CAAC;IAEO,UAAU;QACd,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,GAAG,CAAC,EAAE;YAC3B,MAAM,SAAS,GAAc,IAAI,CAAC,IAAI,EAAE,CAAC;YACzC,OAAO,IAAI,+CAAQ,CAAC,SAAS,CAAC,CAAC;SAElC;QACD,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;IACvB,CAAC;IAEO,IAAI;QACR,IAAI,IAAI,GAAc,IAAI,CAAC,OAAO,EAAE,CAAC;QAErC,OAAO,IAAI,EAAE;YACT,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,SAAS,CAAC,EAAE;gBACjC,MAAM,IAAI,GAAgB,EAAE,CAAC;gBAC7B,MAAM,MAAM,GAAG,IAAI,CAAC;gBACpB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,UAAU,CAAC,EAAE;oBACnC,GAAG;wBACC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;qBAChC,QAAQ,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,KAAK,CAAC,EAAE;iBACzC;gBACD,MAAM,KAAK,GAAU,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,UAAU,EAAE,8BAA8B,CAAC,CAAC;gBACxF,OAAO,IAAI,gDAAS,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;aACnD;iBAAM,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,GAAG,CAAC,EAAE;gBAClC,MAAM,IAAI,GAAU,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,UAAU,EAAE,gCAAgC,CAAC,CAAC;gBACzF,IAAI,GAAG,IAAI,+CAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACnC;iBAAM;gBACH,MAAM;aACT;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,KAAK;QACT,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,WAAW,CAAC,EAAE;YACnC,MAAM,GAAG,GAAG,EAAE,CAAC;YACf,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,YAAY,CAAC,EAAE;gBACpC,OAAO,IAAI,mDAAY,CAAC,EAAE,CAAC,CAAC;aAC/B;YACD,GAAG;gBACC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;aAC/B,QAAQ,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,KAAK,CAAC,EAAE;YACtC,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,YAAY,EAAE,sCAAsC,CAAC,CAAC;YAC7E,OAAO,IAAI,iDAAU,CAAC,GAAG,CAAC,CAAC;SAC9B;QACD,wBAAwB;IAC5B,CAAC;IAEO,OAAO;QACX,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,KAAK,CAAC,EAAE;YAC7B,OAAO,IAAI,mDAAY,CAAC,KAAK,CAAC,CAAC;SAClC;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,IAAI,CAAC,EAAE;YAC5B,OAAO,IAAI,mDAAY,CAAC,IAAI,CAAC,CAAC;SACjC;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,IAAI,CAAC,EAAE;YAC3B,OAAO,IAAI,mDAAY,CAAC,IAAI,CAAC,CAAC;SAClC;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,MAAM,EAAE,gDAAS,CAAC,MAAM,CAAC,EAAE;YAChD,OAAO,IAAI,mDAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC;SACpD;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,UAAU,CAAC,EAAE;YAClC,MAAM,UAAU,GAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACpC,OAAO,IAAI,oDAAa,CAAC,UAAU,CAAC,CAAC;SACxC;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,SAAS,CAAC,EAAE;YACjC,MAAM,IAAI,GAAc,IAAI,CAAC,UAAU,EAAE,CAAC;YAC1C,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,UAAU,EAAE,+BAA+B,CAAC,CAAC;YACpE,OAAO,IAAI,oDAAa,CAAC,IAAI,CAAC,CAAC;SAClC;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,SAAS,CAAC,EAAE;YACjC,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;SACxB;QAED,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,IAAI,EAAE,gDAAS,CAAC,QAAQ,CAAC,EAAE;YAChD,MAAM,KAAK,GAAU,IAAI,4CAAK,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC;YACnF,MAAM,MAAM,GAAc,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAC7D,OAAO,IAAI,kDAAW,CAAC,MAAM,CAAC,CAAC;SAClC;QAED,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,qBAAqB,CAAC,CAAC;QAC1D,oBAAoB;QACpB,OAAO,IAAI,mDAAY,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAEM,MAAM;QACT,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,UAAU,CAAC,EAAE;YAClC,OAAO,IAAI,kDAAW,CAAC,EAAE,CAAC,CAAC;SAC9B;QACD,MAAM,UAAU,GAAe,EAAE,CAAC;QAClC,GAAG;YACC,IAAI,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,MAAM,EAAE,gDAAS,CAAC,UAAU,CAAC,EAAE;gBACpD,MAAM,GAAG,GAAU,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACnC,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,KAAK,EAAE,iCAAiC,CAAC,CAAC;gBACjE,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChC,UAAU,CAAC,IAAI,CAAC,IAAI,+CAAQ,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;aACnD;iBAAM;gBACH,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,8CAA8C,CAAC,CAAC;aAChF;SACJ,QAAQ,IAAI,CAAC,KAAK,CAAC,gDAAS,CAAC,KAAK,CAAC,EAAE;QACtC,IAAI,CAAC,OAAO,CAAC,gDAAS,CAAC,UAAU,EAAE,mCAAmC,CAAC,CAAC;QACxE,OAAO,IAAI,kDAAW,CAAC,UAAU,CAAC,CAAC;IACvC,CAAC;CAmBJ;;;;;;;;;;;;;ACzgBD;AAAA;AAAO,MAAM,SAAS;IAKlB,YAAY,MAAwB,EAAE,SAAoB,IAAI,EAAE,KAAa;QACzE,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAEM,GAAG,CAAC,IAAY,EAAE,KAAU;QAC/B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC;IAEM,GAAG,CAAC,GAAW;QAClB,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACtB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAC/B;QACD,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAG;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAC/B;QACD,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,sBAAsB,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IAC5D,CAAC;CAEJ;;;;;;;;;;;;;AC5BD;AAAA;AAAO,MAAM,MAAO,SAAQ,KAAK;IAG7B,YAAY,KAAU;QAClB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;CACJ;;;;;;;;;;;;;ACPD;AAAA;AAAA;AAAgD;AAIhD,MAAM,OAAO,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,CAAC;AAE7D,MAAM,OAAO,GAAG,CAAC,IAAY,EAAG,EAAE,CAAC,CAAC,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC;AAEhG,MAAM,cAAc,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;AAExE,MAAM,SAAS,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,oDAAS,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;AAEnD,MAAM,OAAO;IAQhB,YAAY,MAAc;QALnB,WAAM,GAAY,EAAE,CAAC;QACpB,YAAO,GAAG,CAAC,CAAC;QACZ,SAAI,GAAG,CAAC,CAAC;QACT,UAAK,GAAG,CAAC,CAAC;QAGd,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAEO,GAAG;QACP,OAAO,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC9C,CAAC;IAEO,OAAO;QACX,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;IAChD,CAAC;IAEO,QAAQ,CAAC,SAAiB,EAAE,OAAY;QAC5C,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,gDAAK,CAAC,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACrE,CAAC;IAEO,KAAK,CAAC,QAAgB;QAC1B,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE;YACZ,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,QAAQ,EAAE;YAC/C,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,IAAI;QACR,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE;YACZ,OAAO,IAAI,CAAC;SACf;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IAEO,QAAQ;QACZ,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YACxC,OAAO,IAAI,CAAC;SACf;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;IAChD,CAAC;IAEO,OAAO;QACX,OAAO,IAAI,CAAC,IAAI,EAAE,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE;YACxC,IAAI,CAAC,OAAO,EAAE,CAAC;SAClB;IACL,CAAC;IAEO,MAAM,CAAC,KAAa;QACxB,OAAO,IAAI,CAAC,IAAI,EAAE,KAAK,KAAK,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE;YACzC,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,EAAE;gBACrB,IAAI,CAAC,IAAI,EAAE,CAAC;aACf;YACD,IAAI,CAAC,OAAO,EAAE,CAAC;SAClB;QAED,uBAAuB;QACvB,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE;YACZ,IAAI,CAAC,SAAS,CAAC,0CAA0C,KAAK,EAAE,CAAC,CAAC;YAClE,OAAO;SACV;QAED,iBAAiB;QACjB,IAAI,CAAC,OAAO,EAAE,CAAC;QAEf,+BAA+B;QAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;QACtE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACnC,CAAC;IAEO,MAAM;QACV,oBAAoB;QACpB,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE;YACzB,IAAI,CAAC,OAAO,EAAE,CAAC;SAClB;QAED,sBAAsB;QACtB,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE;YAChD,IAAI,CAAC,OAAO,EAAE,CAAC;SAClB;QAED,qBAAqB;QACrB,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE;YACzB,IAAI,CAAC,OAAO,EAAE,CAAC;SAClB;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAG,IAAI,CAAC,OAAO,CAAC,CAAC;QAC/D,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3C,CAAC;IAEO,UAAU;QACd,OAAO,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE;YAChC,IAAI,CAAC,OAAO,EAAE,CAAC;SAClB;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAE9D,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE;YAClB,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SAC9B;aAAM;YACH,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;SACtC;IACL,CAAC;IAEM,IAAI;QACP,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE;YAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC;YAC1B,IAAI,CAAC,SAAS,EAAE,CAAC;SACpB;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,gDAAK,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACxD,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAEO,SAAS;QACb,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAC5B,QAAQ,IAAI,EAAE;YACV,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YAClD,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YACnD,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YACpD,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YACrD,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YAClD,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YACnD,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YAC9C,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YAC5C,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YAClD,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YAC7C,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YAC9C,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YACjD,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YAC9C,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YAChD,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YAC/C,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YAC/E,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YAC5E,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YACtE,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YAC7E,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YACnF,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YAClH,KAAK,GAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,iBAAiB,EAAC,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBAAC,MAAM;YACpH,KAAK,GAAG;gBACJ,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;oBACjB,IAAI,CAAC,OAAO,EAAE,CAAC;iBAClB;qBAAM;oBACH,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;iBAChC;gBACD,MAAM;YACV,KAAK,IAAI;gBAAE,IAAI,CAAC,IAAI,EAAE,CAAC;gBAAC,MAAM;YAC9B,KAAK,GAAG,CAAC;YACT,KAAK,GAAG;gBACJ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAClB,MAAM;YACV,eAAe;YACf,KAAK,GAAG,CAAC;YACT,KAAK,IAAI,CAAC;YACV,KAAK,IAAI;gBACL,MAAM;YACV,eAAe;YACf;gBACI,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;oBACf,IAAI,CAAC,MAAM,EAAE,CAAC;iBACjB;qBAAM,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;oBACtB,IAAI,CAAC,UAAU,EAAE,CAAC;iBACrB;qBAAM;oBACH,IAAI,CAAC,SAAS,CAAC,yBAAyB,IAAI,GAAG,CAAC,CAAC;iBACpD;gBACD,MAAM;SACb;IACL,CAAC;IAEO,SAAS,CAAC,OAAe;QAC7B,OAAO,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,IAAI,OAAO,OAAO,EAAE,CAAC,CAAC;QACtD,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;IACvE,CAAC;CAEJ;;;;;;;;;;;;;ACjMD;AAAA;AAAO,MAAM,KAAK;IAKd,YAAY,SAAgB,IAAI;QAC5B,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAEM,GAAG,CAAC,IAAY,EAAE,KAAU;QAC/B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC;IAEM,MAAM,CAAC,IAAY,EAAE,KAAU;QAClC,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACvB,OAAO,CAAC,KAAK,CAAC,eAAe,IAAI,6BAA6B,CAAC;SAClE;aAAM;YACH,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SACzB;IACL,CAAC;IAEM,MAAM,CAAC,IAAY,EAAE,KAAU;QAClC,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACvB,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SACzB;aAAM;YACH,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;gBACtB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aAC1C;YACD,OAAO,CAAC,KAAK,CAAC,eAAe,IAAI,yBAAyB,CAAC;SAC9D;IACL,CAAC;IAEM,GAAG,CAAC,IAAW;QAClB,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAC9B,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACvC;QACD,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAG;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAChC;aAAM;YACH,uBAAuB;YACvB;;;eAGG;YACH,IAAI,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,WAAW,EAAE;gBAC5C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAClD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACvC;SACJ;QACD,OAAO,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,IAAI,MAAM,IAAI,CAAC,MAAM,iBAAiB,CAAC;IAC3E,CAAC;CAEJ;;;;;;;;;;;;;ACrDD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,MAAe,IAAI;IACtB,gBAAe,CAAC;CAEnB;AAeM,MAAM,KAAM,SAAQ,IAAI;IAG9B,YAAY,UAAkB;QAC7B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC9B,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,QAAQ;QACN,OAAO,YAAY,CAAC;IACtB,CAAC;CACJ;AAEM,MAAM,UAAW,SAAQ,IAAI;IAGnC,YAAY,UAAgB;QAC3B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC9B,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED,QAAQ;QACN,OAAO,iBAAiB,CAAC;IAC3B,CAAC;CACJ;AAEM,MAAM,EAAG,SAAQ,IAAI;IAK3B,YAAY,SAAe,EAAE,QAAc,EAAE,QAAc;QAC1D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC1B,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,QAAQ;QACN,OAAO,SAAS,CAAC;IACnB,CAAC;CACJ;AAEM,MAAM,IAAK,SAAQ,IAAI;IAK7B,YAAY,IAAW,EAAE,MAAe,EAAE,IAAY;QACrD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,QAAQ;QACN,OAAO,WAAW,CAAC;IACrB,CAAC;CACJ;AAEM,MAAM,KAAM,SAAQ,IAAI;IAI9B,YAAY,IAAW,EAAE,OAAe;QACvC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACxB,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,QAAQ;QACN,OAAO,YAAY,CAAC;IACtB,CAAC;CACJ;AAEM,MAAM,MAAO,SAAQ,IAAI;IAI/B,YAAY,OAAc,EAAE,KAAW;QACtC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACpB,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,QAAQ;QACN,OAAO,aAAa,CAAC;IACvB,CAAC;CACJ;AAEM,MAAM,KAAM,SAAQ,IAAI;IAI9B,YAAY,SAAe,EAAE,IAAU;QACtC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,QAAQ;QACN,OAAO,YAAY,CAAC;IACtB,CAAC;CACJ;AAEM,MAAM,OAAQ,SAAQ,IAAI;IAIhC,YAAY,IAAU,EAAE,SAAe;QACtC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC5B,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,QAAQ;QACN,OAAO,cAAc,CAAC;IACxB,CAAC;CACJ;AAEM,MAAM,KAAM,SAAQ,IAAI;IAG9B,YAAY,UAAgB;QAC3B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC9B,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,QAAQ;QACN,OAAO,YAAY,CAAC;IACtB,CAAC;CACJ;AAEM,MAAM,GAAI,SAAQ,IAAI;IAK5B,YAAY,IAAW,EAAE,IAAW,EAAE,WAAiB;QACtD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IAChC,CAAC;IAEE,MAAM,CAAI,OAAuB;QAC/B,OAAO,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,QAAQ;QACN,OAAO,UAAU,CAAC;IACpB,CAAC;CACJ;;;;;;;;;;;;;AClND;AAAA;AAAA;AAAA,IAAY,SAoEX;AApED,WAAY,SAAS;IACjB,gBAAgB;IAChB,uCAAG;IACH,2CAAK;IACL,6CAAM;IAEN,0BAA0B;IAC1B,mDAAS;IACT,qDAAU;IACV,uDAAW;IACX,yDAAY;IACZ,mDAAS;IACT,qDAAU;IACV,2CAAK;IACL,wCAAG;IACH,oDAAS;IACT,4CAAK;IACL,0CAAI;IACJ,0CAAI;IACJ,4CAAK;IACL,gDAAO;IACP,8CAAM;IAEN,8BAA8B;IAC9B,4CAAK;IACL,sDAAU;IACV,0CAAI;IACJ,kDAAQ;IACR,0CAAI;IACJ,oDAAS;IACT,4CAAK;IACL,sDAAU;IACV,gDAAO;IACP,0DAAY;IACZ,0CAAI;IACJ,oDAAS;IACT,4CAAK;IACL,kDAAQ;IAER,yBAAyB;IACzB,8DAAc;IACd,gEAAe;IAEf,WAAW;IACX,sDAAU;IACV,8CAAM;IACN,8CAAM;IAEN,WAAW;IACX,wCAAG;IACH,4CAAK;IACL,sCAAE;IACF,0CAAI;IACJ,4CAAK;IACL,kDAAQ;IACR,0CAAI;IACJ,wCAAG;IACH,sCAAE;IACF,wCAAG;IACH,0CAAI;IACJ,sCAAE;IACF,4CAAK;IACL,8CAAM;IACN,4CAAK;IACL,0CAAI;IACJ,wCAAG;IACH,wCAAG;IACH,4CAAK;AACT,CAAC,EApEW,SAAS,KAAT,SAAS,QAoEpB;AAEM,MAAM,KAAK;IAOd,YAAY,IAAY,EAAE,MAAc,EAAE,OAAY,EAAE,IAAY;QAChE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAErB,CAAC;IAEM,QAAQ;QACX,OAAO,GAAG,IAAI,CAAC,IAAI,MAAM,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,OAAO,EAAE,CAAC;IAC5D,CAAC;CAEJ","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","import { Interpreter } from './interpreter';\nimport { Scope } from './scope';\nimport { Return } from './return';\nimport { Prototype } from './prototype';\nimport * as Stmt from './statement';\n\nexport class InternalEntity {\n    public call: (interpreter: Interpreter, thiz: any, args: any[]) => any;\n    public toString: () => string = () => '<native function>';\n    public arity: () => number;\n}\n\nexport class PrototypeEntity {\n    public prototype: Prototype;\n    public properties: Map<string, any>;\n\n    constructor() {\n        this.prototype = new Prototype(null, null, this);\n        this.properties = new Map();\n\n        const hasOwnProperty = new InternalEntity();\n        hasOwnProperty.call = (int, thiz, args) => this.properties.has(args[1]);\n        hasOwnProperty.toString = () => 'hasOwnProperty';\n        hasOwnProperty.arity = () => 2;\n        this.prototype.values.set('hasOwnProperty', hasOwnProperty);\n\n        const lengthProperty = new InternalEntity();\n        lengthProperty.call = (int, thiz, args) => this.properties.size;\n        lengthProperty.toString = () => 'lengthProperty';\n        lengthProperty.arity = () => 1;\n        this.prototype.values.set('length', lengthProperty);\n    }\n\n    public get(key: string): any {\n        if (this.properties.has(key)) {\n            return this.properties.get(key);\n        }\n        return this.prototype.get(key);\n    }\n\n    public set(key: string, value: any) {\n        this.properties.set(key, value);\n    }\n\n    public toString(): string {\n        return 'object';\n    }\n}\n\nexport class CallableEntity extends PrototypeEntity {\n\n    constructor() {\n        super();\n    }\n\n    public arity(): number {\n        return 0;\n    }\n\n    public call(interpreter: Interpreter, thiz: any, args: any[]): any { return; }\n    public toString(): string {\n        return '<internal function>';\n    }\n\n}\n\nexport class FunctionEntity extends CallableEntity {\n    public name: string;\n    private declaration: Stmt.Func;\n    private closure: Scope;\n\n    constructor(declaration: Stmt.Func, closure: Scope) {\n        super();\n        this.declaration = declaration;\n        this.closure = closure;\n        this.name = this.declaration.name.lexeme;\n    }\n\n    public toString(): string {\n        return '<' + this.declaration.name.lexeme + ' function>';\n    }\n\n    public arity(): number {\n        return this.declaration.params.length;\n    }\n\n    public call(interpreter: Interpreter, thiz: any, args: any[]): any {\n        const scope = new Scope(this.closure);\n        for (let i = 0; i < this.declaration.params.length; i++) {\n            scope.define(this.declaration.params[i].lexeme, args[i]);\n        }\n        scope.set('this', thiz);\n        try {\n            interpreter.executeBlock(this.declaration.body, scope);\n        } catch (e) {\n            if (e instanceof Return) {\n                return e.value;\n            }\n        }\n        return undefined;\n    }\n\n}\n\nexport class InstanceEntity extends CallableEntity {\n    private instanceof: string;\n    constructor(construct: FunctionEntity) {\n        super();\n        this.instanceof = construct.name;\n        this.properties = new Map();\n        this.prototype = new Prototype(construct.properties, construct.prototype, this);\n    }\n\n    public get(key: string): any {\n        if (this.properties.has(key)) {\n            return this.properties.get(key);\n        }\n        return this.prototype.get(key);\n        throw new Error(`${this.instanceof} does not have ${key}`);\n    }\n\n    public set(key: string, value: any) {\n        this.prototype.set(key, value);\n    }\n\n    public toString(): string {\n        return '<' + this.instanceof + \" instance>\";\n    }\n}\n\nexport class ClassPrototype  extends CallableEntity {\n\n    public name: string;\n    public prototype: Prototype;\n\n    constructor(name: string, methods: Stmt.Func[]) {\n        super();\n        this.name = name;\n        this.prototype = new Prototype(null,null, this);\n        for (const method of methods) {\n            this.prototype.set(method.name.lexeme, method);\n        }\n    }\n\n    public arity(): number {\n        return 0;\n    }\n\n    public call(interpreter: Interpreter, args: any[]): any {\n        const instance: InstanceEntity  = new InstanceEntity(null);\n        return instance;\n    }\n\n    public toString(): string {\n        return '<' + this.name + ' class>';\n    }\n\n}\n","export enum ConsoleMessageType {\n    User,\n    Error,\n    Warning,\n    Info\n}\n\nexport interface ConsoleMessage {\n    time: Date;\n    text: any;\n    type: ConsoleMessageType;\n}\n\nexport class Console {\n\n    public messages: ConsoleMessage[];\n\n    constructor() {\n        this.messages = [];\n    }\n\n    private add(message: any, type: ConsoleMessageType): void {\n        this.messages.push({\n            text: message,\n            type: type,\n            time: new Date()\n        });\n    }\n\n    public clear(): void {\n        this.messages = [];\n    }\n\n    public log(message: any) {\n        this.add(message, ConsoleMessageType.User);\n    }\n\n    public warn(message: any) {\n        this.add(message, ConsoleMessageType.Warning);\n    }\n\n    public error(message: any) {\n        this.add(message, ConsoleMessageType.Error);\n        // throw new Error(\"\");\n    }\n\n    public info(message: any) {\n        this.add(message, ConsoleMessageType.Info);\n    }\n\n    public print(): any {\n        return console.log(this.messages.map(cm => cm.text));\n    }\n\n}","export const DemoSourceCode =\n`// Recursive function\nfunction factorialize(n) {\n    if (n < 0) {\n        return -1;\n    }\n    if (n == 0) {\n        return 1;\n    }\n    return (n * factorialize(n - 1));\n}\nprint factorialize(5);\n\n// Prototype objects\nfunction MyClass(text) {\n    this.text = text;\n}\n\nMyClass.method = function(text) {\n    this.text = this.text + text;\n};\n\nMyClass.count = function(times) {\n    function nested(num) {\n        return num * num;\n    }\n    for (let i = 0; i < times; ++i) {\n        print nested(i);\n    }\n};\n\nvar instance = new MyClass('Hello ');\ninstance.method('World');\ninstance.count(3);\nprint instance.text;\n\n// string length operator '$'\nprint \"the length of hellow world is: \" + $\"hello world\";\nprint  $\"hello\" === 6 ? 'hello is 5 character length' : 'it is not';\n\n// while loop and ternary operator\nlet i = 0;\nwhile (i <= 4) {\n    print i % 2 ? 'odd' : 'even';\n    i = i + 1;\n}\n\n// literals\nvar literal = {\n    firstname: \"John\",\n    lastname: \"Doe\",\n    records: {\n        prev: \"previous\",\n        next: \"next\"\n    }\n};\n\nprint literal.records.prev;\n`;\n","import { Token } from 'token';\n\nimport { Stmt } from 'statement';\n\nexport abstract class Expr {\n    constructor() {}\n    abstract accept<R>(visitor: ExprVisitor<R>): R;\n}\n\nexport interface ExprVisitor<R> {\n\tvisitAssignExpr(expr: Assign): R;\n\tvisitBinaryExpr(expr: Binary): R;\n\tvisitTernaryExpr(expr: Ternary): R;\n\tvisitCallExpr(expr: Call): R;\n\tvisitEntityExpr(expr: Entity): R;\n\tvisitGetExpr(expr: Get): R;\n\tvisitSetExpr(expr: Set): R;\n\tvisitNewExpr(expr: New): R;\n\tvisitGroupingExpr(expr: Grouping): R;\n\tvisitLiteralExpr(expr: Literal): R;\n\tvisitUnaryExpr(expr: Unary): R;\n\tvisitVariableExpr(expr: Variable): R;\n\tvisitLambdaExpr(expr: Lambda): R;\n\tvisitArrayExpr(expr: Array): R;\n}\n\nexport class Assign extends Expr {\n\tpublic name: Token;\n\tpublic value: Expr;\n\n\tconstructor(name: Token, value: Expr) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.value = value;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitAssignExpr(this);\n    }\n\n    toString(): string {\n      return 'Expr.Assign';\n    }\n}\n\nexport class Binary extends Expr {\n\tpublic left: Expr;\n\tpublic operator: Token;\n\tpublic right: Expr;\n\n\tconstructor(left: Expr, operator: Token, right: Expr) {\n\t\tsuper();\n\t\tthis.left = left;\n\t\tthis.operator = operator;\n\t\tthis.right = right;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitBinaryExpr(this);\n    }\n\n    toString(): string {\n      return 'Expr.Binary';\n    }\n}\n\nexport class Ternary extends Expr {\n\tpublic condition: Expr;\n\tpublic thenExpr: Expr;\n\tpublic elseExpr: Expr;\n\n\tconstructor(condition: Expr, thenExpr: Expr, elseExpr: Expr) {\n\t\tsuper();\n\t\tthis.condition = condition;\n\t\tthis.thenExpr = thenExpr;\n\t\tthis.elseExpr = elseExpr;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitTernaryExpr(this);\n    }\n\n    toString(): string {\n      return 'Expr.Ternary';\n    }\n}\n\nexport class Call extends Expr {\n\tpublic callee: Expr;\n\tpublic paren: Token;\n\tpublic args: Expr[];\n\tpublic thiz: any;\n\n\tconstructor(callee: Expr, paren: Token, args: Expr[], thiz: any) {\n\t\tsuper();\n\t\tthis.callee = callee;\n\t\tthis.paren = paren;\n\t\tthis.args = args;\n\t\tthis.thiz = thiz;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitCallExpr(this);\n    }\n\n    toString(): string {\n      return 'Expr.Call';\n    }\n}\n\nexport class Entity extends Expr {\n\tpublic properties: Expr[];\n\n\tconstructor(properties: Expr[]) {\n\t\tsuper();\n\t\tthis.properties = properties;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitEntityExpr(this);\n    }\n\n    toString(): string {\n      return 'Expr.Entity';\n    }\n}\n\nexport class Get extends Expr {\n\tpublic object: Expr;\n\tpublic name: Token;\n\n\tconstructor(object: Expr, name: Token) {\n\t\tsuper();\n\t\tthis.object = object;\n\t\tthis.name = name;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitGetExpr(this);\n    }\n\n    toString(): string {\n      return 'Expr.Get';\n    }\n}\n\nexport class Set extends Expr {\n\tpublic object: Expr;\n\tpublic name: Token;\n\tpublic value: Expr;\n\n\tconstructor(object: Expr, name: Token, value: Expr) {\n\t\tsuper();\n\t\tthis.object = object;\n\t\tthis.name = name;\n\t\tthis.value = value;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitSetExpr(this);\n    }\n\n    toString(): string {\n      return 'Expr.Set';\n    }\n}\n\nexport class New extends Expr {\n\tpublic construct: Expr;\n\n\tconstructor(construct: Expr) {\n\t\tsuper();\n\t\tthis.construct = construct;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitNewExpr(this);\n    }\n\n    toString(): string {\n      return 'Expr.New';\n    }\n}\n\nexport class Grouping extends Expr {\n\tpublic expression: Expr;\n\n\tconstructor(expression: Expr) {\n\t\tsuper();\n\t\tthis.expression = expression;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitGroupingExpr(this);\n    }\n\n    toString(): string {\n      return 'Expr.Grouping';\n    }\n}\n\nexport class Literal extends Expr {\n\tpublic value: any;\n\n\tconstructor(value: any) {\n\t\tsuper();\n\t\tthis.value = value;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitLiteralExpr(this);\n    }\n\n    toString(): string {\n      return 'Expr.Literal';\n    }\n}\n\nexport class Unary extends Expr {\n\tpublic operator: Token;\n\tpublic right: Expr;\n\n\tconstructor(operator: Token, right: Expr) {\n\t\tsuper();\n\t\tthis.operator = operator;\n\t\tthis.right = right;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitUnaryExpr(this);\n    }\n\n    toString(): string {\n      return 'Expr.Unary';\n    }\n}\n\nexport class Variable extends Expr {\n\tpublic name: Token;\n\n\tconstructor(name: Token) {\n\t\tsuper();\n\t\tthis.name = name;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitVariableExpr(this);\n    }\n\n    toString(): string {\n      return 'Expr.Variable';\n    }\n}\n\nexport class Lambda extends Expr {\n\tpublic lambda: Stmt;\n\n\tconstructor(lambda: Stmt) {\n\t\tsuper();\n\t\tthis.lambda = lambda;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitLambdaExpr(this);\n    }\n\n    toString(): string {\n      return 'Expr.Lambda';\n    }\n}\n\nexport class Array extends Expr {\n\tpublic value: Expr[];\n\n\tconstructor(value: Expr[]) {\n\t\tsuper();\n\t\tthis.value = value;\n\t}\n\n    accept<R>(visitor: ExprVisitor<R>): R {\n      return visitor.visitArrayExpr(this);\n    }\n\n    toString(): string {\n      return 'Expr.Array';\n    }\n}\n\n\n","import { Scanner } from './scanner';\nimport { Parser } from './parser';\nimport { Interpreter } from './interpreter';\nimport { Console } from './console';\nimport { DemoSourceCode } from './demo';\n\n(<any>window).conzole = new Console();\n(<any>window).demoSourceCode = DemoSourceCode;\n(<any>window).execute = function(source: string): Console {\n    /*\n    const consoleInstance = new Console();\n    const scanner = new Scanner(source);\n    const printer = new TreePrinter();\n    const tokens = scanner.scanTokens();\n    const parser = new Parser(tokens);\n    const intererpreter = new Interpreter(consoleInstance);\n    const statements = parser.parse();\n    intererpreter.interpet(statements);\n    */\n\n\n    return (new Interpreter().interpet((new Parser((new Scanner(source)).scan())).parse()));\n}\n","import * as Expr from './expression';\nimport * as Stmt from './statement';\nimport { FunctionEntity, CallableEntity, ClassPrototype, InternalEntity, InstanceEntity, PrototypeEntity } from './callable';\nimport { Console } from './console';\nimport { Return } from './return';\nimport { Scope } from './scope';\nimport { TokenType } from './token';\nimport { Prototype } from './prototype';\ndeclare var conzole: Console;\n\nexport class Interpreter implements\n    Expr.ExprVisitor<any>,\n    Stmt.StmtVisitor<void> {\n    public global = new Scope();\n    private scope = this.global;\n\n    constructor( ) {\n        const rand = new CallableEntity();\n        rand.call = () => Math.random();\n        rand.toString = () => '<native function>';\n        this.global.define('rand', rand);\n\n        const echo = new InternalEntity();\n        echo.arity = () => 1;\n        echo.toString = () => '<native function>';\n        echo.call = (interpreter, thiz, args) => console.log(args[0]);\n        this.global.define('echo', echo);\n\n        this.global.define('months', [\"Jan\", \"Feb\", \"Mar\", \"Apr\"]);\n\n    }\n\n    private evaluate(expr: Expr.Expr): any {\n        return expr.accept(this);\n    }\n\n    private execute(stmt: Stmt.Stmt): void {\n        stmt.accept(this);\n    }\n\n    public interpet(statements: Stmt.Stmt[]): any {\n        for (const statement of statements) {\n            this.execute(statement);\n        }\n    }\n\n    public visitExpressionStmt(stmt: Stmt.Expression): void {\n        this.evaluate(stmt.expression);\n    }\n\n    public visitPrintStmt(stmt: Stmt.Print): void {\n        const value = this.evaluate(stmt.expression);\n        conzole.log(value);\n    }\n\n    public visitVarStmt(stmt: Stmt.Var): void {\n        let value: object = null;\n        if (stmt.initializer !== null) {\n            value = this.evaluate(stmt.initializer);\n        }\n\n        if (stmt.type.type === TokenType.var)  {\n            this.scope.set(stmt.name.lexeme, value);\n        } else {\n            this.scope.define(stmt.name.lexeme, value);\n        }\n    }\n\n    public visitVariableExpr(expr: Expr.Variable): any {\n        return this.scope.get(expr.name);\n    }\n\n    public visitArrayExpr(expr: Expr.Array): any[] {\n        const arr: any[] = [];\n        for (const expression of expr.value) {\n            arr.push(this.evaluate(expression));\n        }\n        return arr;\n    }\n\n    public visitAssignExpr(expr: Expr.Assign): void {\n        const value = this.evaluate(expr.value);\n        this.scope.assign(expr.name.lexeme, value);\n    }\n\n    public visitBinaryExpr(expr: Expr.Binary): any {\n        const left = this.evaluate(expr.left);\n        const right = this.evaluate(expr.right);\n        switch (expr.operator.type) {\n            case TokenType.minus:\n                return <number> left - <number> right;\n            case TokenType.slash:\n                return <number> left / <number> right;\n            case TokenType.star:\n                return <number> left * <number> right;\n            case TokenType.percent:\n                return <number> left % <number> right;\n            case TokenType.plus:\n                if (typeof left === 'number' && typeof right === 'number') {\n                    return <number> (left + right);\n                } else {\n                    return <string> left + <string> right;\n                }\n            case TokenType.pipe:\n                return <number> left | <number> right;\n            case TokenType.caret:\n                return <number> left ^ <number> right;\n            case TokenType.greater:\n                return <number> left > <number> right;\n            case TokenType.greaterEqual:\n                return <number> left >= <number> right;\n            case TokenType.less:\n                return <number> left < <number> right;\n            case TokenType.lessEqual:\n                return <number> left <= <number> right;\n            case TokenType.equalEqual:\n                // tslint:disable-next-line\n                return left == right;\n            case TokenType.equalEqualEqual:\n                return left === right;\n            case TokenType.bangEqual:\n                // tslint:disable-next-line\n                return left != right;\n            case TokenType.bangEqualEqual:\n                return left !== right;\n            default:\n                conzole.warn(expr);\n                return null; // unreachable\n                break;\n        }\n    }\n\n    public visitTernaryExpr(expr: Expr.Ternary): any {\n        return this.evaluate(expr.condition) ? this.evaluate(expr.thenExpr) : this.evaluate(expr.elseExpr);\n    }\n\n    public visitGroupingExpr(expr: Expr.Grouping): any {\n        return this.evaluate(expr.expression);\n    }\n\n    public visitLiteralExpr(expr: Expr.Literal): any {\n        return expr.value;\n    }\n\n    public visitUnaryExpr(expr: Expr.Unary): any {\n        const right = this.evaluate(expr.right);\n        switch (expr.operator.type) {\n            case TokenType.minus:\n                return -Number(right);\n            case TokenType.bang:\n                return !Boolean(right);\n            case TokenType.dollar:\n                return right.length;\n            case TokenType.plusPlus:\n                const incValue = Number(right) + 1;\n                this.scope.assign((<Expr.Variable> expr.right).name.lexeme, incValue);\n                return incValue;\n            case TokenType.minusMinus:\n                const decValue = Number(right) - 1;\n                this.scope.assign((<Expr.Variable> expr.right).name.lexeme, decValue);\n                return decValue;\n            default:\n                return null; // should be unreachable\n        }\n    }\n\n    public executeBlock(statements: Stmt.Stmt[], nextScope: Scope): void {\n        const currentScope = this.scope;\n        this.scope = nextScope;\n        for (const statement of statements) {\n            this.execute(statement);\n        }\n        this.scope = currentScope;\n    }\n\n    public visitBlockStmt(stmt: Stmt.Block): void {\n        this.executeBlock(stmt.statements, new Scope(this.scope));\n    }\n\n    public visitIfStmt(stmt: Stmt.If): void {\n        if (this.evaluate(stmt.condition)) {\n            this.execute(stmt.thenStmt);\n        } else if (stmt.elseStmt !== null) {\n            this.execute(stmt.elseStmt);\n        }\n    }\n\n    public visitWhileStmt(stmt: Stmt.While): void {\n        while (this.evaluate(stmt.condition)) {\n            this.execute(stmt.loop);\n        }\n    }\n\n    public visitDoWhileStmt(stmt: Stmt.DoWhile): void {\n        do {\n            this.execute(stmt.loop);\n        } while (this.evaluate(stmt.condition));\n    }\n\n    public visitCallExpr(expr: Expr.Call): object {\n        const callee = this.evaluate(expr.callee);\n        const args = [];\n        let thiz: any = null;\n        if (expr.callee instanceof Expr.Get) {\n            thiz = this.evaluate(expr.callee.object);\n        } else if (expr.thiz !== null) {\n            thiz = expr.thiz;\n        }\n        for (const argument of expr.args) {\n            args.push(this.evaluate(argument));\n        }\n\n        if (!(callee instanceof CallableEntity) &&\n            !(callee instanceof InternalEntity)\n        ) {\n            conzole.error(`${callee} is not a function`);\n            throw new Error();\n        }\n        const func = callee as CallableEntity;\n        if (args.length !== func.arity()) {\n            conzole.warn(`Warning at (${expr.paren.line}): ${callee} mismatched argument length; \\n Expected ${func.arity()} but got ${args.length} `);\n        }\n        return func.call(this, thiz, args);\n    }\n\n    public visitNewExpr(expr: Expr.New): object {\n        const construct = expr.construct as Expr.Call;\n        const callee = this.evaluate(construct.callee);\n        const newInstance = new InstanceEntity(callee);\n        construct.thiz = newInstance;\n        this.evaluate(construct);\n        return newInstance;\n    }\n\n    public visitEntityExpr(expr: Expr.Entity) {\n        const entity = new PrototypeEntity();\n        for (const property of expr.properties) {\n            const key = (property as Expr.Set).name.lexeme;\n            const value = this.evaluate((property as Expr.Set).value);\n            entity.set(key, value);\n        }\n        return entity;\n    }\n\n    public visitClassStmt(stmt: Stmt.Class): any {\n        this.scope.define(stmt.name.lexeme, null);\n        const classDef = new ClassPrototype(stmt.name.lexeme, stmt.methods);\n        this.scope.set(stmt.name.lexeme, classDef);\n        return null;\n    }\n\n    public visitGetExpr(expr: Expr.Get): any {\n        const entity = this.evaluate(expr.object);\n        if (entity instanceof PrototypeEntity) {\n            return entity.get(expr.name.lexeme);\n        }\n        conzole.error(`${expr.name} Only instances have properties`);\n        throw new Error();\n    }\n\n    public visitSetExpr(expr: Expr.Set): void {\n        const entity = this.evaluate(expr.object);\n        // TODO: check type of entity properly: CallableEntity/Prototype\n        if (typeof entity.set === \"undefined\") {\n            conzole.warn(`${expr.name.lexeme} is not a runtime Object`);\n        }\n        const value = this.evaluate(expr.value);\n        (entity as PrototypeEntity).set(expr.name.lexeme, value);\n        return value;\n    }\n\n    public visitFuncStmt(stmt: Stmt.Func): any {\n        const func: FunctionEntity = new FunctionEntity(stmt, this.scope);\n        this.scope.define(stmt.name.lexeme, func);\n        return null;\n    }\n\n    public visitLambdaExpr(expr: Expr.Lambda): object {\n        const lambda: Stmt.Func = expr.lambda as Stmt.Func;\n        const func: FunctionEntity = new FunctionEntity(lambda, this.scope);\n        return func;\n    }\n\n    public visitReturnStmt(stmt: Stmt.Return): any {\n        let value = undefined;\n        if (stmt.value) {\n            value = this.evaluate(stmt.value);\n        }\n        throw new Return(value);\n    }\n\n}\n","import { Token, TokenType } from './token';\nimport * as Expr from './expression';\nimport * as Stmt from './statement';\nimport { Console } from './console';\ndeclare var conzole: Console;\n\nexport class Parser {\n    private current = 0;\n    private tokens: Token[];\n\n    constructor(tokens: Token[]) {\n        this.tokens = tokens;\n    }\n\n    public parse(): Stmt.Stmt[] {\n       const statements: Stmt.Stmt[] = [];\n       while (!this.eof()) {\n           statements.push(this.declaration());\n       }\n       return statements;\n    }\n\n    private match(...types: TokenType[]): boolean {\n        for (const type of types) {\n            if (this.check(type)) {\n                this.advance();\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private advance(): Token {\n        if (!this.eof()) {\n            this.current++;\n        }\n        return this.previous();\n    }\n\n    private peek(): Token {\n        return this.tokens[this.current];\n    }\n\n    private previous(): Token {\n        return this.tokens[this.current - 1];\n    }\n\n    private check(type: TokenType): boolean {\n        return this.peek().type === type;\n    }\n\n    private eof(): boolean {\n        return this.check(TokenType.eof);\n    }\n\n    private consume(type: TokenType, message: string): Token {\n        if (this.check(type)) {\n            return this.advance();\n        }\n\n        return this.parseError(this.peek(), message);\n    }\n\n    private parseError(token: Token, message: string) {\n        // tslint:disable-next-line\n        if (token.type == TokenType.eof) {\n            conzole.error(`Error in (${token.line}): at end ${message}`);\n        } else {\n            conzole.error(`Error in (${token.line}): at \"${token.lexeme}\" ${message}`);\n        }\n\n        throw new Error ('Error parsing');\n        // unreachable code\n        return new Token('panic', 'error', 'error', 0);\n    }\n\n    private synchronize(): void {\n        this.advance();\n\n        while (!this.eof()) {\n            if (this.previous().type === TokenType.semicolon) {\n                return;\n            }\n\n            switch (this.peek().type) {\n                case TokenType.class:\n                case TokenType.function:\n                case TokenType.var:\n                case TokenType.for:\n                case TokenType.if:\n                case TokenType.while:\n                case TokenType.print:\n                case TokenType.return:\n                    return;\n            }\n            this.advance();\n        }\n    }\n\n    private declaration(): Stmt.Stmt {\n        try {\n            if (this.match(TokenType.class)) {\n                return this.classDeclaration();\n            }\n            if (this.match(TokenType.function, TokenType.func)) {\n                return this.funcDeclaration(\"function\");\n            }\n            if (this.match(TokenType.var, TokenType.let)) {\n                return this.varDeclaration(this.previous());\n            }\n            return this.statement();\n        } catch (error) {\n            throw new Error('Error parsing. Execution has been stopped');\n            // TODO: reenable synchronize\n            // this.synchronize();\n            return null;\n        }\n    }\n\n    private classDeclaration(): Stmt.Class {\n        const name: Token = this.consume(TokenType.identifier, `Expected a class name`);\n        this.consume(TokenType.leftBrace, `Expected \"{\" after class name`);\n        const methods: Stmt.Func[] = [];\n\n        while (!this.check(TokenType.rightBrace) && !this.eof()) {\n            methods.push(this.funcDeclaration(\"method\"));\n        }\n\n        this.consume(TokenType.rightBrace, `Expected \"}\" after class \"${name.literal}\" methods`);\n        return new Stmt.Class(name, methods);\n    }\n\n    private funcDeclaration(kind: string): Stmt.Func {\n        const name: Token = this.consume(TokenType.identifier, `Expected a ${kind} name`);\n        return this.funcArgsBody(name, \"function\");\n    }\n    private funcArgsBody(name: Token, kind: string): Stmt.Func {\n        this.consume(TokenType.leftParen, `Expected \"(\" after ${kind}`);\n        const params: Token[] = [];\n\n        if (!this.check(TokenType.rightParen)) {\n            do {\n                if (params.length >= 255) {\n                    this.parseError(this.peek(), `Parameter count exceeds 255`);\n                }\n                params.push(this.consume(TokenType.identifier, `Expected a parameter name`));\n            } while (this.match(TokenType.comma));\n        }\n        this.consume(TokenType.rightParen, `Expect \")\" after parameters`);\n        this.consume(TokenType.leftBrace, `Expect \"{\" before ${kind} body`);\n        const body: Stmt.Stmt[] = this.block();\n        return new Stmt.Func(name, params, body);\n    }\n\n    private varDeclaration(type: Token): Stmt.Stmt {\n        const name: Token = this.consume(TokenType.identifier, `Expected a variable name`);\n        let initializer: Expr.Expr  = null;\n        if (this.match(TokenType.equal)) {\n            initializer = this.expression();\n        }\n        this.consume(TokenType.semicolon, `Expected semicolon \";\" after a value.`);\n\n        return new Stmt.Var(name, type, initializer);\n    }\n\n    private statement() {\n        if (this.match(TokenType.if)) {\n            return this.ifStatement();\n        }\n        if (this.match(TokenType.print)) {\n            return this.printStatement();\n        }\n        if (this.match(TokenType.do)) {\n            return this.doWhileStatement();\n        }\n        if (this.match(TokenType.while)) {\n            return this.whileStatement();\n        }\n        if (this.match(TokenType.for)) {\n            return this.forStatement();\n        }\n        if (this.match(TokenType.leftBrace)) {\n            return new Stmt.Block(this.block());\n        }\n        if (this.match(TokenType.return)) {\n            return this.returnStatement();\n        }\n        return this.expressionStatement();\n    }\n\n    private ifStatement(): Stmt.Stmt {\n        this.consume(TokenType.leftParen, `Expected \"(\" after an if`);\n        const condition: Expr.Expr = this.expression();\n        this.consume(TokenType.rightParen, `Expected \")\" after if condition`);\n        const thenStmt: Stmt.Stmt = this.statement();\n        let elseStmt: Stmt.Stmt =  null;\n        if (this.match(TokenType.else)) {\n            elseStmt = this.statement();\n        }\n        return new Stmt.If(condition, thenStmt, elseStmt);\n    }\n\n    private whileStatement(): Stmt.Stmt {\n        this.consume(TokenType.leftParen, `Expected \"(\" after a while statement`);\n        const condition: Expr.Expr = this.expression();\n        this.consume(TokenType.rightParen, `Expected \")\" after while condition`);\n        const loop: Stmt.Stmt = this.statement();\n        return new Stmt.While(condition, loop);\n    }\n\n    private forStatement(): Stmt.Stmt {\n        this.consume(TokenType.leftParen, `Expected \"(\" after a for statement`);\n        let initializer: Stmt.Stmt;\n        if (this.match(TokenType.semicolon)) {\n            initializer = null;\n        } else if (this.match(TokenType.var, TokenType.let)) {\n            initializer = this.varDeclaration(this.previous());\n        } else {\n            initializer = this.expressionStatement();\n        }\n        let condition: Expr.Expr;\n        if (!this.check(TokenType.semicolon)) {\n            condition = this.expression();\n        }\n        this.consume(TokenType.semicolon, `Expected \";\" after loop condition`);\n        let increment: Expr.Expr;\n        if (!this.check(TokenType.rightParen)) {\n            increment = this.expression();\n        }\n        this.consume(TokenType.rightParen, `Expected \";\" after loop condition`);\n        let body: Stmt.Stmt = this.statement();\n        if (increment !== null) {\n            body = new Stmt.Block([\n                body,\n                new Stmt.Expression(increment)\n            ]);\n        }\n        if (condition === null) {\n            condition = new Expr.Literal(true);\n        }\n        body = new Stmt.While(condition, body);\n        if (initializer !== null) {\n            body = new Stmt.Block([\n                initializer,\n                body\n            ]);\n        }\n        return body;\n    }\n\n    private doWhileStatement(): Stmt.Stmt {\n        const loop: Stmt.Stmt = this.statement();\n        this.consume(TokenType.while, `Expected condition after do statement`);\n        this.consume(TokenType.leftParen, `Expected \"(\" after a while`);\n        const condition: Expr.Expr = this.expression();\n        this.consume(TokenType.rightParen, `Expected \")\" after while condition`);\n        this.consume(TokenType.semicolon, `Expected semicolon \";\" after a do while condition`);\n        return new Stmt.DoWhile(loop, condition);\n    }\n\n    private printStatement(): Stmt.Stmt {\n        const value: Expr.Expr = this.expression();\n        this.consume(TokenType.semicolon, `Expected semicolon \";\" after a value.`);\n        return new Stmt.Print(value);\n    }\n\n    private returnStatement(): Stmt.Stmt {\n        const keyword: Token = this.previous();\n        let value = undefined;\n\n        if (!this.check(TokenType.semicolon)) {\n            value = this.expression();\n        }\n\n        this.consume(TokenType.semicolon, `Exected \";\" after return statement`);\n        return new Stmt.Return(keyword, value);\n    }\n\n    private block(): Stmt.Stmt[] {\n        const statements: Stmt.Stmt[] = [];\n        while (!this.check(TokenType.rightBrace) && !this.eof()) {\n            statements.push(this.declaration());\n        }\n        this.consume(TokenType.rightBrace, `Expected closing block \"}\"`);\n        return statements;\n    }\n\n    private expressionStatement(): Stmt.Stmt {\n        const expression: Expr.Expr = this.expression();\n        this.consume(TokenType.semicolon, `Expected semicolon \";\" after ${expression} expression`);\n        return new Stmt.Expression(expression);\n    }\n\n    private expression(): Expr.Expr {\n        return this.assignment();\n    }\n\n    private assignment(): Expr.Expr {\n        const expr: Expr.Expr = this.ternary();\n\n        if (this.match(TokenType.equal)) {\n            const equals: Token = this.previous();\n            const value: Expr.Expr = this.ternary();\n\n            if (expr instanceof Expr.Variable) {\n                const name: Token = expr.name;\n                return new Expr.Assign(name, value);\n            } else if (expr instanceof Expr.Get) {\n                const get: Expr.Get = expr as Expr.Get;\n                return new Expr.Set(get.object, get.name, value);\n            }\n\n            this.parseError(equals, `Invalid l-value, is not an assigning target.`);\n        }\n\n        return expr;\n    }\n\n    private ternary(): Expr.Expr {\n        const expr = this.equality();\n        if (this.match(TokenType.question)) {\n            const thenExpr: Expr.Expr = this.equality();\n            this.consume(TokenType.colon, `Expected \":\" after ternary ? expression`);\n            const elseExpr: Expr.Expr = this.equality();\n            return new Expr.Ternary(expr, thenExpr, elseExpr);\n        }\n        return expr;\n    }\n\n    private equality(): Expr.Expr {\n        let expr  = this.comparison();\n\n        while (this.match(\n            TokenType.bangEqual, TokenType.equalEqual,\n            TokenType.bangEqualEqual, TokenType.equalEqualEqual)\n        ) {\n            const operator: Token = this.previous();\n            const right: Expr.Expr = this.comparison();\n            expr = new Expr.Binary(expr, operator, right);\n        }\n\n        return expr;\n    }\n\n    private comparison(): Expr.Expr {\n        let expr: Expr.Expr = this.addition();\n\n        while (this.match(TokenType.greater, TokenType.greaterEqual, TokenType.less, TokenType.lessEqual)) {\n            const operator: Token = this.previous();\n            const right: Expr.Expr = this.addition();\n            expr = new Expr.Binary(expr, operator, right);\n        }\n\n        return expr;\n    }\n\n    private addition(): Expr.Expr {\n        let expr: Expr.Expr = this.modulus();\n\n        while (this.match(TokenType.minus, TokenType.plus)) {\n            const operator: Token = this.previous();\n            const right: Expr.Expr = this.modulus();\n            expr = new Expr.Binary(expr, operator, right);\n        }\n\n        return expr;\n    }\n\n    private modulus(): Expr.Expr {\n        let expr: Expr.Expr = this.multiplication();\n\n        while (this.match(TokenType.percent)) {\n            const operator: Token = this.previous();\n            const right: Expr.Expr = this.multiplication();\n            expr = new Expr.Binary(expr, operator, right);\n        }\n\n        return expr;\n    }\n\n    private multiplication(): Expr.Expr {\n        let expr: Expr.Expr = this.unary();\n\n        while (this.match(TokenType.slash, TokenType.star)) {\n            const operator: Token = this.previous();\n            const right: Expr.Expr = this.unary();\n            expr = new Expr.Binary(expr, operator, right);\n        }\n\n        return expr;\n    }\n\n    private unary(): Expr.Expr {\n        if (this.match(TokenType.minus, TokenType.bang, TokenType.dollar, TokenType.plusPlus, TokenType.minusMinus)) {\n            const operator: Token = this.previous();\n            const right: Expr.Expr = this.unary();\n            return new Expr.Unary(operator, right);\n        }\n\n        return this.newKeyword();\n    }\n\n    private newKeyword(): Expr.Expr {\n        if (this.match(TokenType.new)) {\n            const construct: Expr.Expr = this.call();\n            return new Expr.New(construct);\n\n        }\n        return this.call();\n    }\n\n    private call(): Expr.Expr {\n        let expr: Expr.Expr = this.primary();\n\n        while (true) {\n            if (this.match(TokenType.leftParen)) {\n                const args: Expr.Expr[] = [];\n                const callee = expr;\n                if (!this.check(TokenType.rightParen)) {\n                    do {\n                        args.push(this.expression());\n                    } while (this.match(TokenType.comma));\n                }\n                const paren: Token = this.consume(TokenType.rightParen, `Expected \")\" after arguments`);\n                return new Expr.Call(callee, paren, args, null);\n            } else if (this.match(TokenType.dot)) {\n                const name: Token = this.consume(TokenType.identifier, `Expect property name after '.'`);\n                expr = new Expr.Get(expr, name);\n            } else {\n                break;\n            }\n        }\n\n        return expr;\n    }\n\n    private array(): Expr.Expr {\n        if (this.match(TokenType.leftBracket)) {\n            const arr = [];\n            if (this.match(TokenType.rightBracket)) {\n                return new Expr.Literal([]);\n            }\n            do {\n                arr.push(this.expression());\n            } while (this.match(TokenType.comma));\n            this.consume(TokenType.rightBracket, `Expected \"]\" after array declaration`);\n            return new Expr.Array(arr);\n        }\n        // return this.object();\n    }\n\n    private primary(): Expr.Expr {\n        if (this.match(TokenType.false)) {\n            return new Expr.Literal(false);\n        }\n        if (this.match(TokenType.true)) {\n            return new Expr.Literal(true);\n        }\n        if (this.match(TokenType.null)) {\n             return new Expr.Literal(null);\n        }\n        if (this.match(TokenType.number, TokenType.string)) {\n            return new Expr.Literal(this.previous().literal);\n        }\n        if (this.match(TokenType.identifier)) {\n            const identifier =  this.previous();\n            return new Expr.Variable(identifier);\n        }\n        if (this.match(TokenType.leftParen)) {\n            const expr: Expr.Expr = this.expression();\n            this.consume(TokenType.rightParen, `Expected \")\" after expression`);\n            return new Expr.Grouping(expr);\n        }\n        if (this.match(TokenType.leftBrace)) {\n            return this.entity();\n        }\n\n        if (this.match(TokenType.func, TokenType.function)) {\n            const token: Token = new Token('lambda', 'lambda', 'lambda', this.previous().line);\n            const lambda: Stmt.Func = this.funcArgsBody(token, \"lambda\");\n            return new Expr.Lambda(lambda);\n        }\n\n        throw this.parseError(this.peek(), `Expected expression`);\n        // unreacheable code\n        return new Expr.Literal(null);\n    }\n\n    public entity(): Expr.Expr {\n        if (this.match(TokenType.rightBrace)) {\n            return new Expr.Entity([]);\n        }\n        const properties: Expr.Set[] = [];\n        do {\n            if (this.match(TokenType.string, TokenType.identifier)) {\n                const key: Token = this.previous();\n                this.consume(TokenType.colon, `Expected \":\" colon after member`);\n                const value = this.expression();\n                properties.push(new Expr.Set(null, key, value));\n            } else {\n                this.parseError(this.peek(), `String or identifier expected after Object {`);\n            }\n        } while (this.match(TokenType.comma));\n        this.consume(TokenType.rightBrace, `Expected \"}\" after object literal`);\n        return new Expr.Entity(properties);\n    }\n\n    /*\n    public indexes(identifier: Token) {\n        const indexes: Expr.Expr[] = [];\n        do {\n            const separator = this.previous();\n            if (separator.type === TokenType.leftBracket) {\n                indexes.push(this.expression());\n                this.consume(TokenType.rightBracket, `Expected bracket closing \"]\" after array`);\n             } else {\n                if (this.match(TokenType.identifier, TokenType.number)) {\n                    indexes.push(new Expr.Literal(this.previous().literal));\n                }\n            }\n        } while (this.match(TokenType.leftBracket, TokenType.dot));\n        return new Expr.Variable(identifier, indexes);\n    }*/\n\n}\n","import { Console } from './console';\ndeclare var conzole: Console;\n\nexport class Prototype {\n\n    public values: Map<string, any>;\n    private parent: Prototype;\n    private owner: object;\n    constructor(values: Map<string, any>, parent: Prototype = null, owner: object) {\n        this.values = new Map(values);\n        this.parent = parent;\n        this.owner = owner;\n    }\n\n    public set(name: string, value: any): void {\n        this.values.set(name, value);\n    }\n\n    public get(key: string): any {\n        if (this.values.has(key)) {\n            return this.values.get(key);\n        }\n        if (this.parent !== null ) {\n            return this.parent.get(key);\n        }\n        conzole.error(`${key} is not defined in ${this.owner}`);\n    }\n\n}\n","export class Return extends Error {\n    public value: any;\n\n    constructor(value: any) {\n        super();\n        this.value = value;\n    }\n}\n","import { Token, TokenType } from '../src/token';\nimport { Console } from './console';\ndeclare var conzole: Console;\n\nconst isDigit = (char: string) => char >= '0' && char <= '9';\n\nconst isAlpha = (char: string ) => (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z');\n\nconst isAlphaNumeric = (char: string) => isAlpha(char) || isDigit(char);\n\nconst isKeyword = (word: string) => TokenType[word] >= 23;\n\nexport class Scanner {\n\n    public source: string;\n    public tokens: Token[] = [];\n    private current = 0;\n    private line = 1;\n    private start = 0;\n\n    constructor(source: string) {\n        this.source = source;\n    }\n\n    private eof() {\n        return this.current >= this.source.length;\n    }\n\n    private advance() {\n        this.current++;\n        return this.source.charAt(this.current - 1);\n    }\n\n    private addToken(tokenName: string, literal: any) {\n        const text = this.source.substring(this.start, this.current);\n        this.tokens.push(new Token(tokenName, text, literal, this.line));\n    }\n\n    private match(expected: string) {\n        if (this.eof()) {\n            return false;\n        }\n\n        if (this.source.charAt(this.current) !== expected) {\n            return false;\n        }\n\n        this.current++;\n        return true;\n    }\n\n    private peek() {\n        if (this.eof()) {\n            return '\\0';\n        }\n        return this.source.charAt(this.current);\n    }\n\n    private peekNext() {\n        if (this.current + 1 >= this.source.length) {\n            return '\\0';\n        }\n        return this.source.charAt(this.current + 1);\n    }\n\n    private comment() {\n        while (this.peek() !== '\\n' && !this.eof()) {\n            this.advance();\n        }\n    }\n\n    private string(quote: string) {\n        while (this.peek() !== quote && !this.eof()) {\n            if (this.peek() == '\\n') {\n                this.line++;\n            }\n            this.advance();\n        }\n\n        // Unterminated string.\n        if (this.eof()) {\n            this.scanError(`Unterminated string, expecting closing ${quote}`);\n            return;\n        }\n\n        // The closing \".\n        this.advance();\n\n        // Trim the surrounding quotes.\n        const value = this.source.substring(this.start + 1, this.current - 1);\n        this.addToken('string', value);\n    }\n\n    private number() {\n        // gets integer part\n        while (isDigit(this.peek())) {\n            this.advance();\n        }\n\n        // checks for fraction\n        if (this.peek() == '.' && isDigit(this.peekNext())) {\n            this.advance();\n        }\n\n        // gets fraction part\n        while (isDigit(this.peek())) {\n            this.advance();\n        }\n\n        const value = this.source.substring(this.start , this.current);\n        this.addToken('number', Number(value));\n    }\n\n    private identifier() {\n        while (isAlphaNumeric(this.peek())) {\n            this.advance();\n        }\n\n        const value = this.source.substring(this.start, this.current);\n\n        if (isKeyword(value)) {\n            this.addToken(value, null);\n        } else {\n            this.addToken('identifier', value);\n        }\n    }\n\n    public scan() {\n        while (!this.eof()) {\n            this.start = this.current;\n            this.scanToken();\n        }\n\n        this.tokens.push(new Token('eof', '', null, this.line));\n        return this.tokens;\n    }\n\n    private scanToken() {\n        const char = this.advance();\n        switch (char) {\n            case '(': this.addToken('leftParen', null); break;\n            case ')': this.addToken('rightParen', null); break;\n            case '[': this.addToken('leftBracket', null); break;\n            case ']': this.addToken('rightBracket', null); break;\n            case '{': this.addToken('leftBrace', null); break;\n            case '}': this.addToken('rightBrace', null); break;\n            case ',': this.addToken('comma', null); break;\n            case '.': this.addToken('dot', null); break;\n            case ';': this.addToken('semicolon', null); break;\n            case '*': this.addToken('star', null); break;\n            case '^': this.addToken('caret', null); break;\n            case '?': this.addToken('question', null); break;\n            case ':': this.addToken('colon', null); break;\n            case '%': this.addToken('percent', null); break;\n            case '$': this.addToken('dollar', null); break;\n            case '-': this.addToken(this.match('-') ? 'minusMinus' : 'minus', null); break;\n            case '+': this.addToken(this.match('+') ? 'plusPlus' : 'plus', null); break;\n            case '|': this.addToken(this.match('|') ? 'or' : 'pipe', null); break;\n            case '<': this.addToken(this.match('=') ? 'lessEqual' : 'less', null); break;\n            case '>': this.addToken(this.match('=') ? 'greaterEqual' : 'greater', null); break;\n            case '!': this.addToken(this.match('=') ? this.match('=') ? 'bangEqualEqual' : 'bangEqual' : 'bang', null); break;\n            case '=': this.addToken(this.match('=') ? this.match('=') ? 'equalEqualEqual': 'equalEqual' : 'equal', null); break;\n            case '/':\n                if (this.match('/')) {\n                    this.comment();\n                } else {\n                    this.addToken('slash', null);\n                }\n                break;\n            case '\\n': this.line++; break;\n            case `'`:\n            case `\"`:\n                this.string(char);\n                break;\n            // ignore cases\n            case ' ':\n            case '\\r':\n            case '\\t':\n                break;\n            // compex cases\n            default:\n                if (isDigit(char)) {\n                    this.number();\n                } else if (isAlpha(char)) {\n                    this.identifier();\n                } else {\n                    this.scanError(`Unexpected character '${char}'`);\n                }\n                break;\n        }\n    }\n\n    private scanError(message: string): void {\n        conzole.error(`Error at (${this.line}):  ${message}`);\n        throw new Error('Error while scanning. Execution has been stoped');\n    }\n\n}\n","import { Token } from './token';\nimport { Console } from './console';\ndeclare var conzole: Console;\n\nexport class Scope {\n\n    private values: Map<string, any>;\n    private parent: Scope;\n\n    constructor(parent: Scope = null) {\n        this.values = new Map();\n        this.parent = parent;\n    }\n\n    public set(name: string, value: any) {\n        this.values.set(name, value);\n    }\n\n    public define(name: string, value: any) {\n        if (this.values.has(name)) {\n            conzole.error(`identifier \"${name}\" has already been declared`)\n        } else {\n            this.set(name, value);\n        }\n    }\n\n    public assign(name: string, value: any): void {\n        if (this.values.has(name)) {\n            this.set(name, value);\n        } else {\n            if (this.parent !== null) {\n                return this.parent.assign(name, value);\n            }\n            conzole.error(`Identifier \"${name}\" has not been declared`)\n        }\n    }\n\n    public get(name: Token): any {\n        if (this.values.has(name.lexeme)) {\n            return this.values.get(name.lexeme);\n        }\n        if (this.parent !== null ) {\n            return this.parent.get(name);\n        } else {\n            // this is global scope\n            /**\n             * TODO: reconsider this\n             * its injecting javascript global scope into application\n             */\n            if (typeof window[name.lexeme] !== 'undefined') {\n                this.values.set(name.lexeme, window[name.lexeme]);\n                return this.values.get(name.lexeme);\n            }\n        }\n        conzole.error(`Error at (${name.line}): ${name.lexeme} is not defined`)\n    }\n\n}\n","import { Token } from 'token';\n\nimport { Expr } from 'expression';\n\nexport abstract class Stmt {\n    constructor() {}\n    abstract accept<R>(visitor: StmtVisitor<R>): R;\n}\n\nexport interface StmtVisitor<R> {\n\tvisitBlockStmt(stmt: Block): R;\n\tvisitExpressionStmt(stmt: Expression): R;\n\tvisitIfStmt(stmt: If): R;\n\tvisitFuncStmt(stmt: Func): R;\n\tvisitClassStmt(stmt: Class): R;\n\tvisitReturnStmt(stmt: Return): R;\n\tvisitWhileStmt(stmt: While): R;\n\tvisitDoWhileStmt(stmt: DoWhile): R;\n\tvisitPrintStmt(stmt: Print): R;\n\tvisitVarStmt(stmt: Var): R;\n}\n\nexport class Block extends Stmt {\n\tpublic statements: Stmt[];\n\n\tconstructor(statements: Stmt[]) {\n\t\tsuper();\n\t\tthis.statements = statements;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitBlockStmt(this);\n    }\n\n    toString(): string {\n      return 'Stmt.Block';\n    }\n}\n\nexport class Expression extends Stmt {\n\tpublic expression: Expr;\n\n\tconstructor(expression: Expr) {\n\t\tsuper();\n\t\tthis.expression = expression;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitExpressionStmt(this);\n    }\n\n    toString(): string {\n      return 'Stmt.Expression';\n    }\n}\n\nexport class If extends Stmt {\n\tpublic condition: Expr;\n\tpublic thenStmt: Stmt;\n\tpublic elseStmt: Stmt;\n\n\tconstructor(condition: Expr, thenStmt: Stmt, elseStmt: Stmt) {\n\t\tsuper();\n\t\tthis.condition = condition;\n\t\tthis.thenStmt = thenStmt;\n\t\tthis.elseStmt = elseStmt;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitIfStmt(this);\n    }\n\n    toString(): string {\n      return 'Stmt.If';\n    }\n}\n\nexport class Func extends Stmt {\n\tpublic name: Token;\n\tpublic params: Token[];\n\tpublic body: Stmt[];\n\n\tconstructor(name: Token, params: Token[], body: Stmt[]) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.params = params;\n\t\tthis.body = body;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitFuncStmt(this);\n    }\n\n    toString(): string {\n      return 'Stmt.Func';\n    }\n}\n\nexport class Class extends Stmt {\n\tpublic name: Token;\n\tpublic methods: Func[];\n\n\tconstructor(name: Token, methods: Func[]) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.methods = methods;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitClassStmt(this);\n    }\n\n    toString(): string {\n      return 'Stmt.Class';\n    }\n}\n\nexport class Return extends Stmt {\n\tpublic keyword: Token;\n\tpublic value: Expr;\n\n\tconstructor(keyword: Token, value: Expr) {\n\t\tsuper();\n\t\tthis.keyword = keyword;\n\t\tthis.value = value;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitReturnStmt(this);\n    }\n\n    toString(): string {\n      return 'Stmt.Return';\n    }\n}\n\nexport class While extends Stmt {\n\tpublic condition: Expr;\n\tpublic loop: Stmt;\n\n\tconstructor(condition: Expr, loop: Stmt) {\n\t\tsuper();\n\t\tthis.condition = condition;\n\t\tthis.loop = loop;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitWhileStmt(this);\n    }\n\n    toString(): string {\n      return 'Stmt.While';\n    }\n}\n\nexport class DoWhile extends Stmt {\n\tpublic loop: Stmt;\n\tpublic condition: Expr;\n\n\tconstructor(loop: Stmt, condition: Expr) {\n\t\tsuper();\n\t\tthis.loop = loop;\n\t\tthis.condition = condition;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitDoWhileStmt(this);\n    }\n\n    toString(): string {\n      return 'Stmt.DoWhile';\n    }\n}\n\nexport class Print extends Stmt {\n\tpublic expression: Expr;\n\n\tconstructor(expression: Expr) {\n\t\tsuper();\n\t\tthis.expression = expression;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitPrintStmt(this);\n    }\n\n    toString(): string {\n      return 'Stmt.Print';\n    }\n}\n\nexport class Var extends Stmt {\n\tpublic name: Token;\n\tpublic type: Token;\n\tpublic initializer: Expr;\n\n\tconstructor(name: Token, type: Token, initializer: Expr) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.type = type;\n\t\tthis.initializer = initializer;\n\t}\n\n    accept<R>(visitor: StmtVisitor<R>): R {\n      return visitor.visitVarStmt(this);\n    }\n\n    toString(): string {\n      return 'Stmt.Var';\n    }\n}\n\n\n","export enum TokenType {\n    // parser tokens\n    eof,\n    panic,\n    lambda,\n\n    // single character tokens\n    leftParen,\n    rightParen,\n    leftBracket,\n    rightBracket,\n    leftBrace,\n    rightBrace,\n    comma,\n    dot,\n    semicolon,\n    slash,\n    star,\n    pipe,\n    caret,\n    percent,\n    dollar,\n\n    // one or two character tokens\n    minus,\n    minusMinus,\n    plus,\n    plusPlus,\n    bang,\n    bangEqual,\n    equal,\n    equalEqual,\n    greater,\n    greaterEqual,\n    less,\n    lessEqual,\n    colon,\n    question,\n\n    // three character tokens\n    bangEqualEqual,\n    equalEqualEqual,\n\n    // literals\n    identifier,\n    string,\n    number,\n\n    // keywords\n    and,\n    class,\n    do,\n    else,\n    false,\n    function,\n    func,\n    for,\n    if,\n    new,\n    null,\n    or,\n    print,\n    return,\n    super,\n    true,\n    var,\n    let,\n    while\n}\n\nexport class Token {\n    public name: string;\n    public line: number;\n    public type: TokenType;\n    public literal: any;\n    public lexeme: string;\n\n    constructor(name: string, lexeme: string, literal: any, line: number) {\n        this.name = name;\n        this.type = TokenType[name];\n        this.lexeme = lexeme;\n        this.literal = literal;\n        this.line = line;\n\n    }\n\n    public toString() {\n        return `${this.name}:  ${this.lexeme}  ${this.literal}`;\n    }\n\n}\n"],"sourceRoot":""}